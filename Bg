local SilentAimModule = {}

local function debugWarn(msg)
    local line = debug.info(2, "l") or "?"
    warn("[SilentAim Debug] Line " .. tostring(line) .. ": " .. tostring(msg))
end

local function debugError(msg)
    local line = debug.info(2, "l") or "?"
    error("[SilentAim Error] Line " .. tostring(line) .. ": " .. tostring(msg))
end

Playersaimbot = nil
PlayersPosition = nil
NPCaimbot = nil
NPCPosition = nil

local Players = game:GetService("Players")
if not Players then debugError("Players service missing!") end

local player = Players.LocalPlayer
if not player then debugError("LocalPlayer not found!") end

local char = player.Character or player.CharacterAdded:Wait()
if not char then debugError("Character could not be loaded!") end

local RunService = game:GetService("RunService")
if not RunService then debugError("RunService missing!") end

local UserInputService = game:GetService("UserInputService")
local camera = workspace.CurrentCamera or debugWarn("No CurrentCamera found!")

local currentHighlight, currentTarget = nil, nil
local dmgConn, healthConn, lastHealth = nil, nil, 0
local currentTool, vActive, sharkZActive, cursedZActive = nil, false, false, false
local SilentAimPlayersEnabled = false
local SilentAimNPCsEnabled = false
local PredictionEnabled = false
local savedPlayerAimState = false
local savedNPCAimState = false
local skillHitConfirmed = false

local PredictionAmount = 0.1
local maxRange = 1000
local rightTouches = {}

local function getHRP(model)
    if not model then
        debugWarn("getHRP called with nil model")
        return nil
    end
    local hrp = model:FindFirstChild("HumanoidRootPart")
    if not hrp then
        debugWarn("HumanoidRootPart missing in model: " .. model.Name)
        return nil
    end
    return hrp
end

local function getPredictedPosition(hrp)
    if not hrp then return nil end
    if not PredictionEnabled then
        return hrp.Position
    end

    local velocity = hrp.Velocity
    return hrp.Position + (velocity * PredictionAmount)
end

local function getClosestPlayer(lpHRP)
    local closest = nil
    local closestDist = math.huge
    for _, pl in ipairs(Players:GetPlayers()) do
        if pl ~= player and pl.Character and pl.Character.Parent ~= nil then
            local hrp = getHRP(pl.Character)
            if hrp then
                local dist = (hrp.Position - lpHRP.Position).Magnitude
                if dist <= maxRange and dist < closestDist then
                    closestDist = dist
                    closest = pl
                end
            end
        end
    end
    return closest
end

local function getClosestNPC(lpHRP)
    local enemiesFolder = workspace:FindFirstChild("Enemies")
    if not enemiesFolder then return nil end

    local closest = nil
    local closestDist = math.huge
    for _, npc in ipairs(enemiesFolder:GetChildren()) do
        if npc:IsA("Model") and npc:FindFirstChild("Humanoid") then
            local hrp = getHRP(npc)
            if hrp then
                local dist = (hrp.Position - lpHRP.Position).Magnitude
                if dist <= maxRange and dist < closestDist then
                    closestDist = dist
                    closest = npc
                end
            end
        end
    end
    return closest
end

-- =========================
-- Damage Counter Watch
-- =========================
local function watchDamageCounter()
    if dmgConn then
	    pcall(function() dmgConn:Disconnect() end)
	    dmgConn = nil
	end
    local ok, dmgTextLabel = pcall(function()
        return player:WaitForChild("PlayerGui"):WaitForChild("Main"):WaitForChild("DmgCounter"):WaitForChild("Text")
    end)
    if not ok or not dmgTextLabel then return end

    dmgConn = dmgTextLabel:GetPropertyChangedSignal("Text"):Connect(function()
        local dmgText = tonumber(dmgTextLabel.Text) or 0
        if dmgText > 0 and currentHighlight then
            skillHitConfirmed = true
        end
    end)
end

-- =========================
-- Health Watch for Tilt Reset
-- =========================
local function watchHealth(humanoid)
    if healthConn then
	    pcall(function() healthConn:Disconnect() end)
	    healthConn = nil
	end

    lastHealth = humanoid.Health

    healthConn = humanoid.HealthChanged:Connect(function(newHealth)
	    if currentHighlight and newHealth < lastHealth then
	        skillHitConfirmed = true
	    end
	    lastHealth = newHealth
	end)
end

local function setSilentAimTarget(targetModel)
    if not targetModel then
        debugWarn("setSilentAimTarget called with nil target")
        currentTarget = nil
        return
    end

    local humanoid = targetModel:FindFirstChildOfClass("Humanoid")
    if not humanoid then
        debugWarn("Target model has no Humanoid: " .. targetModel.Name)
        currentTarget = nil
        return
    elseif humanoid.Health <= 0 then
        debugWarn("Target model dead: " .. targetModel.Name)
        currentTarget = nil
        return
    end

    local highlight = Instance.new("Highlight")
    highlight.FillColor = Color3.fromRGB(255, 255, 0)
    highlight.OutlineColor = Color3.fromRGB(255, 255, 0)
    highlight.FillTransparency = 0.5
    highlight.OutlineTransparency = 0
    highlight.Adornee = targetModel
    highlight.Parent = targetModel
    currentHighlight = highlight
    
    humanoid.Died:Connect(function()
        if currentHighlight then
            currentHighlight:Destroy()
            currentHighlight = nil
        end
        currentTarget = nil
    end)

    watchDamageCounter()
    watchHealth(humanoid)
    currentTarget = targetModel
end

RunService.Heartbeat:Connect(function()
    local lpChar = player.Character
    if not lpChar then return end
    local lpHRP = lpChar:FindFirstChild("HumanoidRootPart")
    if not lpHRP then return end
    if not SilentAimPlayersEnabled and not SilentAimNPCsEnabled then
	    if currentHighlight then
	        currentHighlight:Destroy()
	        currentHighlight = nil
	        currentTarget = nil
	    end
	end

    if SilentAimPlayersEnabled then
        local closestPl = getClosestPlayer(lpHRP)
        if closestPl then
            Playersaimbot = closestPl.Name
            local hrp = getHRP(closestPl.Character)
            PlayersPosition = getPredictedPosition(hrp)
            setSilentAimTarget(closestPl.Character)
        else
            Playersaimbot, PlayersPosition = nil, nil
            setSilentAimTarget(nil)
        end
    else
        Playersaimbot, PlayersPosition = nil, nil
    end

    if SilentAimNPCsEnabled then
        local closestNPC = getClosestNPC(lpHRP)
        if closestNPC then
            NPCaimbot = closestNPC.Name
            local hrp = getHRP(closestNPC)
            NPCPosition = getPredictedPosition(hrp)
            setSilentAimTarget(closestNPC)
        else
            NPCaimbot, NPCPosition = nil, nil
            setSilentAimTarget(nil)
        end
    else
        NPCaimbot, NPCPosition = nil, nil
    end
end)

spawn(function()
    local success, gg = pcall(function() return getrawmetatable(game) end)
    if not success or not gg then return end
    local old = gg.__namecall
    if not old then return end

    setreadonly(gg, false)
    gg.__namecall = newcclosure(function(...)
        local method = getnamecallmethod()
        local args = {...}

        local targetPos = nil
        if SilentAimPlayersEnabled and PlayersPosition then
            targetPos = PlayersPosition
        elseif SilentAimNPCsEnabled and NPCPosition then
            targetPos = NPCPosition
        end

        if targetPos and tostring(method) == "FireServer" then
            if tostring(args[1]) == "RemoteEvent" then
                if tostring(args[2]) ~= "true" and tostring(args[2]) ~= "false" then
                    args[2] = targetPos
                    return old(unpack(args))
                end
            end
        end
        return old(...)
    end)
    setreadonly(gg, true)
end)

UserInputService.TouchStarted:Connect(function(touch)
	if touch.Position.X > camera.ViewportSize.X / 2 then
		rightTouches[touch] = true 
		
		savedPlayerAimState = SilentAimPlayersEnabled
		savedNPCAimState = SilentAimNPCsEnabled

		SilentAimPlayersEnabled = false
		SilentAimNPCsEnabled = false

		skillHitConfirmed = false
	end
end)

UserInputService.TouchEnded:Connect(function(touch)
	if rightTouches[touch] then
		rightTouches[touch] = nil
		if not next(rightTouches) then
			if skillHitConfirmed then
			else
				SilentAimPlayersEnabled = savedPlayerAimState
				SilentAimNPCsEnabled = savedNPCAimState
			end
		end
	end
end)

local function hookTool(tool)
	currentTool = tool
	tool.AncestryChanged:Connect(function(_, parent)
		if not parent then
			currentTool = nil
			vActive = false
			sharkZActive = false
			cursedZActive = false
		end
	end)
end

char.ChildAdded:Connect(function(child)
	if child:IsA("Tool") then
		hookTool(child)
	end
end)

char.ChildRemoved:Connect(function(child)
	if child == currentTool then
		currentTool = nil
		vActive = false
		sharkZActive = false
		cursedZActive = false
	end
end)

-- =========================
-- V Skill Detection
-- =========================
local old
old = hookmetamethod(game, "__namecall", function(self, ...)
    local method = getnamecallmethod()
    local args = {...}

    if (method == "InvokeServer" or method == "FireServer") then
        local a1 = args[1]

        if typeof(a1) == "string" and a1:upper() == "V" then
            if currentTool and currentTool.Name == "Dough-Dough" then
                vActive = true
                local stamp = os.clock()
                task.delay(2, function()
                    if os.clock() - stamp >= 2 then
                        vActive = false
                        skillHitConfirmed = false
                        end
                    end
                end)
            end
        end

        if typeof(a1) == "string" and a1:upper() == "Z" then
            if currentTool and currentTool.Name == "Shark Anchor" then
                sharkZActive = true
                local stamp = os.clock()
                task.delay(2, function()
                    if os.clock() - stamp >= 2 then
                        sharkZActive = false
                        skillHitConfirmed = false
                        end
                    end
                end)
            end
        end

        if typeof(a1) == "string" and a1:upper() == "Z" then
            if currentTool and currentTool.Name == "Cursed Dual Katana" then
                cursedZActive = true
                local stamp = os.clock()
                task.delay(2, function()
                    if os.clock() - stamp >= 2 then
                        cursedZActive = false
                        skillHitConfirmed = false			            
                        end
                    end
                end)
            end
        end

        if currentTool and currentTool.Name == "Shark Anchor" and self.Name == "EquipEvent" then
            local arg1 = args[1]
            if arg1 == false then
                currentTool = nil
                sharkZActive = false
            end
        end
    end
    return old(self, ...)
end)


function SilentAimModule:SetPlayerSilentAim(state)
    if typeof(state) ~= "boolean" then
        debugWarn("SetPlayerSilentAim expected boolean, got " .. typeof(state))
        return
    end
    SilentAimPlayersEnabled = state
end

function SilentAimModule:SetNPCSilentAim(state)
    if typeof(state) ~= "boolean" then
        debugWarn("SetNPCSilentAim expected boolean, got " .. typeof(state))
        return
    end
    SilentAimNPCsEnabled = state
end

function SilentAimModule:SetDistanceLimit(num)
    if typeof(num) ~= "number" then
        debugWarn("SetDistanceLimit expected number, got " .. typeof(num))
        return
    end
    maxRange = num
end

function SilentAimModule:SetPredictionAmount(num)
    if typeof(num) ~= "number" then
        debugWarn("SetPredictionAmount expected number, got " .. typeof(num))
        return
    end
    PredictionAmount = num
end

return SilentAimModule
