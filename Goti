local StuffsModule = {}

local PingsOrFpsEnabled = false
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local waterPart = workspace:FindFirstChild("Map") and workspace.Map:FindFirstChild("WaterBase-Plane")

local ScreenGui
local FpsPingLabel
local FpsBoostEnabled = false
local InfiniteEnergy = false
local MobileFastAttack = false
local WalkWaterEnabled = false

local savedSettings = {}
local connections = {}

local function createGui()
	if ScreenGui then return end 

	ScreenGui = Instance.new("ScreenGui")
	ScreenGui.Name = "FpsPingGui"
	ScreenGui.ResetOnSpawn = false
	ScreenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

	FpsPingLabel = Instance.new("TextLabel")
	FpsPingLabel.Name = "FpsPingLabel"
	FpsPingLabel.Size = UDim2.new(0, 120, 0, 20) -- wider for both values
	FpsPingLabel.Position = UDim2.new(1, -10, 0, 10) -- top-right corner
	FpsPingLabel.AnchorPoint = Vector2.new(1, 0) 
	FpsPingLabel.BackgroundTransparency = 1
	FpsPingLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	FpsPingLabel.Font = Enum.Font.SourceSansBold
	FpsPingLabel.TextSize = 18
	FpsPingLabel.TextXAlignment = Enum.TextXAlignment.Right
	FpsPingLabel.RichText = true -- allow color tags
	FpsPingLabel.Parent = ScreenGui
end

local lastTime = tick()
local frameCount = 0
local fps = 0

RunService.RenderStepped:Connect(function(deltaTime)
	if not PingsOrFpsEnabled then
		if ScreenGui then
			ScreenGui.Enabled = false
		end
		return
	end

	createGui()
	ScreenGui.Enabled = true

	frameCount = frameCount + 1
	if tick() - lastTime >= 1 then
		fps = frameCount
		frameCount = 0
		lastTime = tick()
	end

	local ping = math.floor(LocalPlayer:GetNetworkPing() * 2000)

	local fpsColor
	if fps >= 50 then
		fpsColor = "00FF00" -- Green
	elseif fps >= 30 then
		fpsColor = "FFA500" -- Orange
	else
		fpsColor = "FF0000" -- Red
	end

	local pingColor
	if ping <= 80 then
		pingColor = "00FF00" -- Green
	elseif ping <= 150 then
		pingColor = "FFFF00" -- Yellow
	else
		pingColor = "FF0000" -- Red
	end

	FpsPingLabel.Text = string.format(
		'<font color="#%s">FPS: %d</font>  |  <font color="#%s">Ping: %dms</font>',
		fpsColor, fps, pingColor, ping
	)
end)

local function optimizeInstance(v)
	if v:IsA("Part") or v:IsA("MeshPart") then
		v.Material = Enum.Material.Plastic
		v.Reflectance = 0
	elseif v:IsA("Decal") or v:IsA("Texture") then
		v.Transparency = 1
	elseif v:IsA("ParticleEmitter") then
		v.Lifetime = NumberRange.new(0, 0)
	elseif v:IsA("Trail") then
		v.Lifetime = 0
	elseif v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke") or v:IsA("Sparkles") then
		v.Enabled = false
	end
end

local function optimizeUI(instance)
    if instance:IsA("ImageLabel") or instance:IsA("ImageButton") then
        instance.ImageTransparency = 0
        
    elseif instance:IsA("TextLabel") or instance:IsA("TextButton") then
        instance.RichText = false -- turn off rich text if not needed
        instance.TextStrokeTransparency = 1 -- disable stroke
        instance.TextSize = math.min(instance.TextSize, 14) -- reduce text size slightly
        instance.Font = Enum.Font.SourceSans -- simpler font uses less GPU
    end
end

local function applyFpsBoost()
	local g = game
	local w = g.Workspace
	local l = g.Lighting
	local t = w.Terrain

	if not savedSettings.Terrain then
		savedSettings.Terrain = {
			WaterWaveSize = t.WaterWaveSize,
			WaterWaveSpeed = t.WaterWaveSpeed,
			WaterReflectance = t.WaterReflectance,
			WaterTransparency = t.WaterTransparency,
		}
		savedSettings.Lighting = {
			GlobalShadows = l.GlobalShadows,
			FogEnd = l.FogEnd,
			Brightness = l.Brightness,
			EnvironmentSpecularScale =  l.EnvironmentSpecularScale,
			EnvironmentDiffuseScale =  l.EnvironmentDiffuseScale,
		}
		savedSettings.QualityLevel = settings().Rendering.QualityLevel
	end

	t.WaterWaveSize = 0
	t.WaterWaveSpeed = 0
	t.WaterReflectance = 0
	t.WaterTransparency = 1
	l.GlobalShadows = false
	l.FogEnd = 9e9
	l.Brightness = 1
	l.EnvironmentSpecularScale = 0
	l.EnvironmentDiffuseScale = 0
	settings().Rendering.QualityLevel = Enum.QualityLevel.Level01

	for _, e in pairs(l:GetChildren()) do
		if e:IsA("BlurEffect") or e:IsA("SunRaysEffect") or e:IsA("ColorCorrectionEffect") 
		or e:IsA("BloomEffect") or e:IsA("DepthOfFieldEffect") then
			e.Enabled = false
		end
	end
	
	for _, v in pairs(Lighting:GetChildren()) do
	    if v:IsA("Sky") then
	        v:Destroy()
	    end
	end
	
	for _, v in pairs(Lighting:GetChildren()) do
	    if v:IsA("PostEffect") then
	        v.Enabled = false
	    end
	end
	
	for _, obj in pairs(workspace:GetDescendants()) do
	    if obj:IsA("Part") or obj:IsA("MeshPart") or obj:IsA("UnionOperation") then
	        obj.CastShadow = false
	    end
	end

	for _, v in pairs(g:GetDescendants()) do
		optimizeInstance(v)
	end
	
	for _, gui in pairs(LocalPlayer.PlayerGui:GetDescendants()) do
	    optimizeUI(gui)
	end
	
	if setfpscap then
		setfpscap(60)
	end

	table.insert(connections, g.DescendantAdded:Connect(optimizeInstance))
	table.insert(connections, LocalPlayer.PlayerGui.DescendantAdded:Connect(optimizeUI))
end

local function restoreGraphics()
	local g = game
	local w = g.Workspace
	local l = g.Lighting
	local t = w.Terrain

	for _, conn in ipairs(connections) do
		if conn.Connected then conn:Disconnect() end
	end
	connections = {}

	if savedSettings.Terrain then
		for k, v in pairs(savedSettings.Terrain) do
			t[k] = v
		end
	end
	if savedSettings.Lighting then
		for k, v in pairs(savedSettings.Lighting) do
			l[k] = v
		end
	end
	if savedSettings.QualityLevel then
		settings().Rendering.QualityLevel = savedSettings.QualityLevel
	end
end

local function infinitestam()
    local energy = LocalPlayer.Character:WaitForChild("Energy")
    energy.Changed:Connect(function()
        if InfiniteEnergy then
            energy.Value = energy.MaxValue or 100
        end
    end)
end

LocalPlayer.CharacterAdded:Connect(function()
    task.wait(1)
    infinitestam()
end)

if LocalPlayer.Character then
    infinitestam()
end

function Hop()
    local PlaceID = game.PlaceId
    local AllIDs = {}
    local foundAnything = ""
    local actualHour = os.date("!*t").hour
    local Deleted = false
    function TPReturner()
        local Site;
        if foundAnything == "" then
            Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
        else
            Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
        end
        local ID = ""
        if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
            foundAnything = Site.nextPageCursor
        end
        local num = 0;
        for i,v in pairs(Site.data) do
            local Possible = true
            ID = tostring(v.id)
            if tonumber(v.maxPlayers) > tonumber(v.playing) then
                for _,Existing in pairs(AllIDs) do
                    if num ~= 0 then
                        if ID == tostring(Existing) then
                            Possible = false
                        end
                    else
                        if tonumber(actualHour) ~= tonumber(Existing) then
                            local delFile = pcall(function()
                                -- delfile("NotSameServers.json")
                                AllIDs = {}
                                table.insert(AllIDs, actualHour)
                            end)
                        end
                    end
                    num = num + 1
                end
                if Possible == true then
                    table.insert(AllIDs, ID)
                    wait(.1)
                    pcall(function()
                        -- writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                        wait()
                        game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                    end)
                    wait(.1)
                end
            end
        end
    end
    function Teleport() 
        while wait(.1) do
            pcall(function()
                TPReturner()
                if foundAnything ~= "" then
                    TPReturner()
                end
            end)
        end
    end
    Teleport()
end

spawn(function()
    while task.wait() do
        if MobileFastAttack then
            local CameraShakerR = require(game.ReplicatedStorage.Util.CameraShaker)
            CameraShakerR:Stop()
            pcall(function()
                local CombatFrameworkLib = getupvalues(require(game:GetService("Players").LocalPlayer.PlayerScripts.PlayerModule.ControlModule))
                local CmrFwLib = CombatFrameworkLib[2]
                local activeController = CmrFwLib.activeController
                
                activeController.timeToNextAttack = 0
                activeController.attacking = false
                activeController.blocking = false
                activeController.timeToNextBlock = 0
                activeController.increment = 0
                activeController.hitboxMagnitude = 100
                activeController.focusStart = 0
                activeController.humanoid.AutoRotate = 0
                activeController.animator.anims.basic[1]:Play(0.01,0.01,0.01)
            end)
        end
    end
end)

function StuffsModule:SetFpsBoost(state)
    FpsBoostEnabled = state
    if state then
        applyFpsBoost()
    else
        restoreGraphics()
    end
end

function StuffsModule:SetINFEnergy(state)
    InfiniteEnergy = state
end

function StuffsModule:SetHopServer(state)
    Hop()
end

function StuffsModule:SetRejoinServer(state)
    game:GetService("TeleportService"):Teleport(game.PlaceId, game:GetService("Players").LocalPlayer)
end

function StuffsModule:SetFastAttack(state)
    MobileFastAttack = state
end

function StuffsModule:SetWalkWater(state)
    WalkWaterEnabled = state
    if WalkWaterEnabled then
        waterPart.Size = Vector3.new(1000,110,1000)
    else
        waterPart.Size = Vector3.new(1000,80,1000)
    end
end

function StuffsModule:SetPingsOrFps(state)
	PingsOrFpsEnabled = state
	if ScreenGui then
		ScreenGui.Enabled = state
	end
end

return StuffsModule
