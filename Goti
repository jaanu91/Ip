local StuffsModule = {}

local PingsOrFpsEnabled = false
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local waterPart = workspace:FindFirstChild("Map") and workspace.Map:FindFirstChild("WaterBase-Plane")

local ScreenGui
local FpsPingLabel
local FpsBoostEnabled = false
local InfiniteEnergy = false
local FastAttackEnabled = false
local WalkWaterEnabled = false

local savedSettings = {}
local connections = {}

local function createGui()
	if ScreenGui then return end 

	ScreenGui = Instance.new("ScreenGui")
	ScreenGui.Name = "FpsPingGui"
	ScreenGui.ResetOnSpawn = false
	ScreenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

	FpsPingLabel = Instance.new("TextLabel")
	FpsPingLabel.Name = "FpsPingLabel"
	FpsPingLabel.Size = UDim2.new(0, 120, 0, 20) -- wider for both values
	FpsPingLabel.Position = UDim2.new(1, -10, 0, 10) -- top-right corner
	FpsPingLabel.AnchorPoint = Vector2.new(1, 0) 
	FpsPingLabel.BackgroundTransparency = 1
	FpsPingLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	FpsPingLabel.Font = Enum.Font.SourceSansBold
	FpsPingLabel.TextSize = 18
	FpsPingLabel.TextXAlignment = Enum.TextXAlignment.Right
	FpsPingLabel.RichText = true -- allow color tags
	FpsPingLabel.Parent = ScreenGui
end

local lastTime = tick()
local frameCount = 0
local fps = 0

RunService.RenderStepped:Connect(function(deltaTime)
	if not PingsOrFpsEnabled then
		if ScreenGui then
			ScreenGui.Enabled = false
		end
		return
	end

	createGui()
	ScreenGui.Enabled = true

	frameCount = frameCount + 1
	if tick() - lastTime >= 1 then
		fps = frameCount
		frameCount = 0
		lastTime = tick()
	end

	local ping = math.floor(LocalPlayer:GetNetworkPing() * 2000)

	local fpsColor
	if fps >= 50 then
		fpsColor = "00FF00" -- Green
	elseif fps >= 30 then
		fpsColor = "FFA500" -- Orange
	else
		fpsColor = "FF0000" -- Red
	end

	local pingColor
	if ping <= 80 then
		pingColor = "00FF00" -- Green
	elseif ping <= 150 then
		pingColor = "FFFF00" -- Yellow
	else
		pingColor = "FF0000" -- Red
	end

	FpsPingLabel.Text = string.format(
		'<font color="#%s">FPS: %d</font>  |  <font color="#%s">Ping: %dms</font>',
		fpsColor, fps, pingColor, ping
	)
end)

local function optimizeInstance(v)
	if v:IsA("Part") or v:IsA("MeshPart") then
		v.Material = Enum.Material.Plastic
		v.Reflectance = 0
	elseif v:IsA("Decal") or v:IsA("Texture") then
		v.Transparency = 1
	elseif v:IsA("ParticleEmitter") then
		v.Lifetime = NumberRange.new(0, 0)
	elseif v:IsA("Trail") then
		v.Lifetime = 0
	elseif v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke") or v:IsA("Sparkles") then
		v.Enabled = false
	end
end

local function optimizeUI(instance)
    if instance:IsA("ImageLabel") or instance:IsA("ImageButton") then
        instance.ImageTransparency = 0
        
    elseif instance:IsA("TextLabel") or instance:IsA("TextButton") then
        instance.RichText = false -- turn off rich text if not needed
        instance.TextStrokeTransparency = 1 -- disable stroke
        instance.TextSize = math.min(instance.TextSize, 14) -- reduce text size slightly
        instance.Font = Enum.Font.SourceSans -- simpler font uses less GPU
    end
end

local function applyFpsBoost()
	local g = game
	local w = g.Workspace
	local l = g.Lighting
	local t = w.Terrain

	if not savedSettings.Terrain then
		savedSettings.Terrain = {
			WaterWaveSize = t.WaterWaveSize,
			WaterWaveSpeed = t.WaterWaveSpeed,
			WaterReflectance = t.WaterReflectance,
			WaterTransparency = t.WaterTransparency,
		}
		savedSettings.Lighting = {
			GlobalShadows = l.GlobalShadows,
			FogEnd = l.FogEnd,
			Brightness = l.Brightness,
			EnvironmentSpecularScale =  l.EnvironmentSpecularScale,
			EnvironmentDiffuseScale =  l.EnvironmentDiffuseScale,
		}
		savedSettings.QualityLevel = settings().Rendering.QualityLevel
	end

	t.WaterWaveSize = 0
	t.WaterWaveSpeed = 0
	t.WaterReflectance = 0
	t.WaterTransparency = 1
	l.GlobalShadows = false
	l.FogEnd = 9e9
	l.Brightness = 1
	l.EnvironmentSpecularScale = 0
	l.EnvironmentDiffuseScale = 0
	settings().Rendering.QualityLevel = Enum.QualityLevel.Level01

	for _, e in pairs(l:GetChildren()) do
		if e:IsA("BlurEffect") or e:IsA("SunRaysEffect") or e:IsA("ColorCorrectionEffect") 
		or e:IsA("BloomEffect") or e:IsA("DepthOfFieldEffect") then
			e.Enabled = false
		end
	end
	
	for _, v in pairs(Lighting:GetChildren()) do
	    if v:IsA("Sky") then
	        v:Destroy()
	    end
	end
	
	for _, v in pairs(Lighting:GetChildren()) do
	    if v:IsA("PostEffect") then
	        v.Enabled = false
	    end
	end
	
	for _, obj in pairs(workspace:GetDescendants()) do
	    if obj:IsA("Part") or obj:IsA("MeshPart") or obj:IsA("UnionOperation") then
	        obj.CastShadow = false
	    end
	end

	for _, v in pairs(g:GetDescendants()) do
		optimizeInstance(v)
	end
	
	for _, gui in pairs(LocalPlayer.PlayerGui:GetDescendants()) do
	    optimizeUI(gui)
	end
	
	if setfpscap then
		setfpscap(60)
	end

	table.insert(connections, g.DescendantAdded:Connect(optimizeInstance))
	table.insert(connections, LocalPlayer.PlayerGui.DescendantAdded:Connect(optimizeUI))
end

local function restoreGraphics()
	local g = game
	local w = g.Workspace
	local l = g.Lighting
	local t = w.Terrain

	for _, conn in ipairs(connections) do
		if conn.Connected then conn:Disconnect() end
	end
	connections = {}

	if savedSettings.Terrain then
		for k, v in pairs(savedSettings.Terrain) do
			t[k] = v
		end
	end
	if savedSettings.Lighting then
		for k, v in pairs(savedSettings.Lighting) do
			l[k] = v
		end
	end
	if savedSettings.QualityLevel then
		settings().Rendering.QualityLevel = savedSettings.QualityLevel
	end
end

local function infinitestam()
    local energy = LocalPlayer.Character:WaitForChild("Energy")
    energy.Changed:Connect(function()
        if InfiniteEnergy then
            energy.Value = energy.MaxValue or 100
        end
    end)
end

LocalPlayer.CharacterAdded:Connect(function()
    task.wait(1)
    infinitestam()
end)

if LocalPlayer.Character then
    infinitestam()
end

function Hop()
    local PlaceID = game.PlaceId
    local AllIDs = {}
    local foundAnything = ""
    local actualHour = os.date("!*t").hour
    local Deleted = false
    function TPReturner()
        local Site;
        if foundAnything == "" then
            Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
        else
            Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
        end
        local ID = ""
        if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
            foundAnything = Site.nextPageCursor
        end
        local num = 0;
        for i,v in pairs(Site.data) do
            local Possible = true
            ID = tostring(v.id)
            if tonumber(v.maxPlayers) > tonumber(v.playing) then
                for _,Existing in pairs(AllIDs) do
                    if num ~= 0 then
                        if ID == tostring(Existing) then
                            Possible = false
                        end
                    else
                        if tonumber(actualHour) ~= tonumber(Existing) then
                            local delFile = pcall(function()
                                -- delfile("NotSameServers.json")
                                AllIDs = {}
                                table.insert(AllIDs, actualHour)
                            end)
                        end
                    end
                    num = num + 1
                end
                if Possible == true then
                    table.insert(AllIDs, ID)
                    wait(.1)
                    pcall(function()
                        -- writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                        wait()
                        game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                    end)
                    wait(.1)
                end
            end
        end
    end
    function Teleport() 
        while wait(.1) do
            pcall(function()
                TPReturner()
                if foundAnything ~= "" then
                    TPReturner()
                end
            end)
        end
    end
    Teleport()
end

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local Player = Players.LocalPlayer
local Modules = ReplicatedStorage:WaitForChild("Modules")
local Net = Modules:WaitForChild("Net")
local RegisterAttack = Net:WaitForChild("RE/RegisterAttack")
local RegisterHit = Net:WaitForChild("RE/RegisterHit")
local ShootGunEvent = Net:WaitForChild("RE/ShootGunEvent")
local GunValidator = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Validator2")
local _ENV = (getgenv or getrenv or getfenv)()

local Connections = {} do
  if _ENV.rz_connections then
    for _, Connection in ipairs(_ENV.rz_connections) do
      Connection:Disconnect()
    end
  end
  
  _ENV.rz_connections = Connections
end

function IsAlive(Character: Model?)
	if not Character then 
		return false 
	end

	local Humanoid, NoCache = CachedChars[Character] or GetCharacterHumanoid(Character)

	if not Humanoid then 
		return false 
	end

	if NoCache ~= true and not CachedChars[Character] then
		CachedChars[Character] = Humanoid
	end

	if Humanoid.ClassName == "Humanoid" then
		return Humanoid.Health > 0
	else
		return Humanoid.Value > 0
	end
end

local FastAttack = {}
FastAttack.__index = FastAttack

local FastAttack = {
	Distance = 50,
	attackMobs = true,
	attackPlayers = true,
	Equipped = nil,
	Debounce = 0,
	ComboDebounce = 0,
	ShootDebounce = 0,
	M1Combo = 0,

	Overheat = {
		Dragonstorm = {
			MaxOverheat = 3,
			Cooldown = 0,
			TotalOverheat = 0,
			Distance = 350,
			Shooting = false
		}
	},

	ShootsPerTarget = {
		["Dual Flintlock"] = 2
	},

	SpecialShoots = {
		["Skull Guitar"] = "TAP",
		["Bazooka"] = "Position",
		["Cannon"] = "Position",
		["Dragonstorm"] = "Overheat"
	},

	HitboxLimbs = {
		"RightLowerArm",
		"RightUpperArm",
		"LeftLowerArm",
		"LeftUpperArm",
		"RightHand",
		"LeftHand"
	}
}

local RE_RegisterAttack = Net:WaitForChild("RE/RegisterAttack")
local RE_ShootGunEvent = Net:WaitForChild("RE/ShootGunEvent")
local RE_RegisterHit = Net:WaitForChild("RE/RegisterHit")
local Events = ReplicatedStorage:WaitForChild("Events")

local SUCCESS_FLAGS, COMBAT_REMOTE_THREAD = pcall(function()
	return require(Modules.Flags).COMBAT_REMOTE_THREAD or false
end)

local SUCCESS_SHOOT, SHOOT_FUNCTION = pcall(function()
	return getupvalue(require(ReplicatedStorage.Controllers.CombatController).Attack, 9)
end)

local HIT_FUNCTION
task.defer(function()
	local PlayerScripts = Player:WaitForChild("PlayerScripts")
	local LocalScript = PlayerScripts:FindFirstChildOfClass("LocalScript")

	while not LocalScript do
		Player.PlayerScripts.ChildAdded:Wait()
		LocalScript = PlayerScripts:FindFirstChildOfClass("LocalScript")
	end

	if getsenv then
		local Success, ScriptEnv = pcall(getsenv, LocalScript)
		if Success and ScriptEnv then
			HIT_FUNCTION = ScriptEnv._G.SendHitsToServer
		end
	end
end)

FastAttack.ShootsFunctions = {
	["Skull Guitar"] = function(self: FastAttack, Equipped: Tool, Position: Vector3)
		Events.ShootSoulGuitar:Invoke(Position)
	end
}

function IsAlive(Character: Model?)
	if not Character then 
		return false 
	end

	local Humanoid, NoCache = CachedChars[Character] or GetCharacterHumanoid(Character)

	if not Humanoid then 
		return false 
	end

	if NoCache ~= true and not CachedChars[Character] then
		CachedChars[Character] = Humanoid
	end

	if Humanoid.ClassName == "Humanoid" then
		return Humanoid.Health > 0
	else
		return Humanoid.Value > 0
	end
end

function FastAttack:ShootInTarget(TargetPosition: Vector3): (nil)
	local Equipped = IsAlive(Player.Character) and Player.Character:FindFirstChildOfClass("Tool")

	if Equipped and Equipped.ToolTip == "Gun" then
		if Equipped:FindFirstChild("Cooldown") and (tick() - self.ShootDebounce) >= Equipped.Cooldown.Value then
			if self.ShootsFunctions[Equipped.Name] then
				return self.ShootsFunctions[Equipped.Name](self, Equipped, TargetPosition)
			end

			if SUCCESS_SHOOT and SHOOT_FUNCTION then
				local ShootType = self.SpecialShoots[Equipped.Name] or "Normal"

				if ShootType == "Position" or (ShootType == "TAP" and Equipped:FindFirstChild("RemoteEvent")) then
					Equipped:SetAttribute("LocalTotalShots", (Equipped:GetAttribute("LocalTotalShots") or 0) + 1)
					GunValidator:FireServer(self:GetValidator2())

					if ShootType == "TAP" then
						Equipped.RemoteEvent:FireServer("TAP", TargetPosition)
					else
						RE_ShootGunEvent:FireServer(TargetPosition)
					end

					self.ShootDebounce = tick()
				end
			else
				VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 1)
				task.wait(0.05)
				VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, game, 1)
				task.wait(0.05)
				self.ShootDebounce = tick()
			end
		end
	end
end

function FastAttack:CheckStun(ToolTip: string, Character: Character, Humanoid: Humanoid): boolean
	local Stun = Character:FindFirstChild("Stun")
	local Busy = Character:FindFirstChild("Busy")

	if Humanoid.Sit and (ToolTip == "Sword" or ToolTip == "Melee" or ToolTip == "Gun") then
		return false
	end

	return true
end

function FastAttack:Process(assert: boolean, Enemies: Folder, BladeHits: table, Position: Vector3, Distance: number): (nil)
	if not assert then return end

	local HitboxLimbs = self.HitboxLimbs
	local Mobs = Enemies:GetChildren()

	for i = 1, #Mobs do
		local Enemy = Mobs[i]
		local BasePart = Enemy:FindFirstChild(HitboxLimbs[math.random(#HitboxLimbs)]) or Enemy.PrimaryPart
		if not BasePart then continue end

		local CanAttack = Enemy.Parent == Characters and CheckPlayerAlly(Players:GetPlayerFromCharacter(Enemy))

		if Enemy ~= Player.Character and (Enemy.Parent ~= Characters or CanAttack) then
			if IsAlive(Enemy) and (Position - BasePart.Position).Magnitude <= Distance then
				if not self.EnemyRootPart then
					self.EnemyRootPart = BasePart
				else
					table.insert(BladeHits, { Enemy, BasePart })
				end
			end
		end
	end
end

function FastAttack:GetAllBladeHits(Character: Character, Distance: number?): (nil)
	local Position = Character:GetPivot().Position
	local BladeHits = {}
	Distance = Distance or self.Distance

	self:Process(self.attackMobs, Enemies, BladeHits, Position, Distance)
	self:Process(self.attackPlayers, Characters, BladeHits, Position, Distance)

	return BladeHits
end

function FastAttack:GetClosestEnemy(Character: Character, Distance: number?): (nil)
	local BladeHits = self:GetAllBladeHits(Character, Distance)
	local Distance, Closest = math.huge

	for i = 1, #BladeHits do
		local Magnitude = if Closest then (Closest.Position - BladeHits[i][2].Position).Magnitude else Distance
		if Magnitude <= Distance then
			Distance, Closest = Magnitude, BladeHits[i][2]
		end
	end

	return Closest
end

function FastAttack:GetGunHits(Character: Character, Distance: number?)
	local BladeHits = self:GetAllBladeHits(Character, Distance)
	local GunHits = {}

	for i = 1, #BladeHits do
		if not GunHits[1] or (BladeHits[i][2].Position - GunHits[1].Position).Magnitude <= 10 then
			table.insert(GunHits, BladeHits[i][2])
		end
	end

	return GunHits
end

function FastAttack:GetCombo(): number
	local Combo = if tick() - self.ComboDebounce <= 0.4 then self.M1Combo else 0
	Combo = if Combo >= 4 then 1 else Combo + 1

	self.ComboDebounce = tick()
	self.M1Combo = Combo

	return Combo
end

function FastAttack:UseFruitM1(Character: Character, Equipped: Tool, Combo: number): (nil)
	local Position = Character:GetPivot().Position
	local EnemyList = Enemies:GetChildren()

	for i = 1, #EnemyList do
		local Enemy = EnemyList[i]
		local PrimaryPart = Enemy.PrimaryPart

		if IsAlive(Enemy) and PrimaryPart and (PrimaryPart.Position - Position).Magnitude <= 50 then
			local Direction = (PrimaryPart.Position - Position).Unit
			return Equipped.LeftClickRemote:FireServer(Direction, Combo)
		end
	end
end

function FastAttack:UseNormalClick(Humanoid: Humanoid, Character: Character, Cooldown: number): (nil)
	self.EnemyRootPart = nil
	local BladeHits = self:GetAllBladeHits(Character)
	local EnemyRoot = self.EnemyRootPart

	if EnemyRoot then
		if SUCCESS_FLAGS and COMBAT_REMOTE_THREAD and HIT_FUNCTION then
			RE_RegisterAttack:FireServer(Cooldown)
			HIT_FUNCTION(EnemyRoot, BladeHits)
		elseif SUCCESS_FLAGS and not COMBAT_REMOTE_THREAD then
			RE_RegisterAttack:FireServer(Cooldown)
			RE_RegisterHit:FireServer(EnemyRoot, BladeHits)
		else
			EnemyRoot.Size = Vector3.one * 50
			for i = 1, #BladeHits do
				BladeHits[i][2].Size = Vector3.one * 50
			end

			VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 1)
			task.wait(0.05)
			VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, game, 1)
		end
	end
end

function FastAttack:GetValidator2()
	local v1 = getupvalue(SHOOT_FUNCTION, 15)
	local v2 = getupvalue(SHOOT_FUNCTION, 13)
	local v3 = getupvalue(SHOOT_FUNCTION, 16)
	local v4 = getupvalue(SHOOT_FUNCTION, 17)
	local v5 = getupvalue(SHOOT_FUNCTION, 14)
	local v6 = getupvalue(SHOOT_FUNCTION, 12)
	local v7 = getupvalue(SHOOT_FUNCTION, 18)

	local v8 = v6 * v2
	local v9 = (v5 * v2 + v6 * v1) % v3

	v9 = (v9 * v3 + v8) % v4
	v5 = math.floor(v9 / v3)
	v6 = v9 - v5 * v3
	v7 = v7 + 1

	setupvalue(SHOOT_FUNCTION, 15, v1)
	setupvalue(SHOOT_FUNCTION, 13, v2)
	setupvalue(SHOOT_FUNCTION, 16, v3)
	setupvalue(SHOOT_FUNCTION, 17, v4)
	setupvalue(SHOOT_FUNCTION, 14, v5)
	setupvalue(SHOOT_FUNCTION, 12, v6)
	setupvalue(SHOOT_FUNCTION, 18, v7)

	return math.floor(v9 / v4 * 16777215), v7
end

function FastAttack:UseGunShoot(Character, Equipped)
	if not Equipped.Enabled then return end

	local ShootType = self.SpecialShoots[Equipped.Name] or "Normal"

	if ShootType == "Normal" or ShootType == "Overheat" then
		if ShootType == "Overheat" then
			local Data = self.Overheat[Equipped.Name]

			if Data.Shooting then
				return nil
			end

			local Target = self:GetClosestEnemy(Character, Data.Distance or 100)

			if Target then
				Data.Shooting = true

				while Equipped and Equipped.Parent == Player.Character and Data.TotalOverheat < Data.MaxOverheat do
					if Target and Target.Parent and IsAlive(Target.Parent) then
						Equipped:SetAttribute("LocalTotalShots", (Equipped:GetAttribute("LocalTotalShots") or 0) + 1)
						GunValidator:FireServer(self:GetValidator2())
						RE_ShootGunEvent:FireServer(Target.Position, { Target })
						Data.TotalOverheat += task.wait(Data.Cooldown)
					else
						break
					end
				end

				while Data.TotalOverheat > 0 do
					Data.TotalOverheat = math.clamp(Data.TotalOverheat - task.wait(), 0, Data.MaxOverheat)
				end

				Data.Shooting = false
			end
		else
			local Hits = self:GetGunHits(Character, 120)
			local Target = Hits[1] and Hits[1].Position

			if Target then
				Equipped:SetAttribute("LocalTotalShots", (Equipped:GetAttribute("LocalTotalShots") or 0) + 1)
				GunValidator:FireServer(self:GetValidator2())

				for i = 1, (self.ShootsPerTarget[Equipped.Name] or 1) do
					RE_ShootGunEvent:FireServer(Target, Hits)
				end
			end
		end
	elseif ShootType == "Position" or (ShootType == "TAP" and Equipped:FindFirstChild("RemoteEvent")) then
		local Target = self:GetClosestEnemy(Character, 200)

		if Target then
			if self.ShootsFunctions[Equipped.Name] then
				return self.ShootsFunctions[Equipped.Name](self, Equipped, Target.Position)
			end

			Equipped:SetAttribute("LocalTotalShots", (Equipped:GetAttribute("LocalTotalShots") or 0) + 1)
			GunValidator:FireServer(self:GetValidator2())

			if ShootType == "TAP" then
				Equipped.RemoteEvent:FireServer("TAP", Target.Position)
			else
				RE_ShootGunEvent:FireServer(Target.Position)
			end
		end
	end
end

function FastAttack.attack()
	if not Settings.AutoClick or (tick() - Module.AttackCooldown) <= 1 then return end
	if not IsAlive(Player.Character) then return end

	local self = FastAttack
	local Character = Player.Character
	local Humanoid = Character.Humanoid
	local Equipped = Character:FindFirstChildOfClass("Tool")
	local ToolTip = Equipped and Equipped.ToolTip
	local ToolName = Equipped and Equipped.Name

	if not Equipped or (ToolTip ~= "Gun" and ToolTip ~= "Melee" and ToolTip ~= "Blox Fruit" and ToolTip ~= "Sword") then
		return nil
	end

	local Cooldown = Equipped:FindFirstChild("Cooldown") and Equipped.Cooldown.Value or 0.3

	if (tick() - self.Debounce) >= Cooldown and self:CheckStun(ToolTip, Character, Humanoid) then
		local Combo = self:GetCombo()
		Cooldown += if Combo >= 4 then 0.05 else 0

		self.Equipped = Equipped
		self.Debounce = if Combo >= 4 and ToolTip ~= "Gun" then (tick() + 0.05) else tick()

		if ToolTip == "Blox Fruit" then
			if ToolName == "Ice-Ice" or ToolName == "Light-Light" then
				return self:UseNormalClick(Humanoid, Character, Cooldown)
			elseif Equipped:FindFirstChild("LeftClickRemote") then
				return self:UseFruitM1(Character, Equipped, Combo)
			end
		elseif ToolTip == "Gun" then
			if SUCCESS_SHOOT and SHOOT_FUNCTION and Settings.AutoShoot then
				return self:UseGunShoot(Character, Equipped)
			end
		else
			return self:UseNormalClick(Humanoid, Character, Cooldown)
		end
	end
end

table.insert(Connections, RunService.Stepped:Connect(function()
    if FastAttackEnabled then
        FastAttack.attack()
    end
end))

for _, v in pairs(getgc(true)) do
    if typeof(v) == "function" and iscclosure(v) then
        local name = debug.getinfo(v).name
        if name == "Attack" or name == "attack" or name == "RegisterHit" then
            hookfunction(v, function(...)
                if FastAttackEnabled then
                    AttackInstance:Attack()
                end
                return v(...)
            end)
        end
    end
end

function StuffsModule:SetFpsBoost(state)
    FpsBoostEnabled = state
    if state then
        applyFpsBoost()
    else
        restoreGraphics()
    end
end

function StuffsModule:SetINFEnergy(state)
    InfiniteEnergy = state
end

function StuffsModule:SetHopServer(state)
    Hop()
end

function StuffsModule:SetRejoinServer(state)
    game:GetService("TeleportService"):Teleport(game.PlaceId, game:GetService("Players").LocalPlayer)
end

function StuffsModule:SetFastAttack(state)
    FastAttackEnabled = state
end

function StuffsModule:SetWalkWater(state)
    WalkWaterEnabled = state
    if WalkWaterEnabled then
        waterPart.Size = Vector3.new(1000,110,1000)
    else
        waterPart.Size = Vector3.new(1000,80,1000)
    end
end

function StuffsModule:SetPingsOrFps(state)
	PingsOrFpsEnabled = state
	if ScreenGui then
		ScreenGui.Enabled = state
	end
end

return StuffsModule
