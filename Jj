local ESPModule = {}

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CommE = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("CommE")
local CommF = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("CommF_")
local char = player.Character or player.CharacterAdded:Wait()
local humanoid = char:WaitForChild("Humanoid") 

local V3Enabled = false
local BunnyHopEnabled = false
local ESPNameEnabled = true
local ESPHealthEnabled = false
local ESPLevelEnabled = false
local ESPDistanceEnabled = false
local BusoEnabled = false
local v3LoopRunning = false

local currentTool = nil
local connections = {}
local ESPs = {}
local cooldownTime = 31
local v3Loop = nil

-- =========================
-- Ability V3
-- =========================
local function clickActivateAbility()
    if CommE then
        CommE:FireServer("ActivateAbility")
    end
end

local function startV3Loop()
    if v3LoopRunning then return end
    v3LoopRunning = true
    v3Loop = task.spawn(function()
        while v3LoopRunning do
            if not player or not player.Parent then break end
            pcall(clickActivateAbility)
            task.wait(cooldownTime)
        end
        v3Loop = nil
    end)
end

local function stopV3Loop()
    if not v3LoopRunning then return end
    v3LoopRunning = false
    v3Loop = nil
end

-- =========================
-- V Skill Detection
-- =========================
local old
old = hookmetamethod(game, "__namecall", function(self, ...)
    local method = getnamecallmethod()
    local args = {...}

    if (method == "InvokeServer" or method == "FireServer") then
        local a1 = args[1]

        if typeof(a1) == "string" and a1:upper() == "DODGE" then
            if BunnyHopEnabled then
                local ok, h = pcall(function() return humanoid end)
                if ok and h and h.Parent then
                    task.defer(function()
                        pcall(function()
                            h:ChangeState(Enum.HumanoidStateType.Jumping)
                        end)
                    end)
                end
            end
        end
    end
    return old(self, ...)
end)

-- =========================
-- Global Player ESP with Colors
-- =========================
local espFolder = game.CoreGui:FindFirstChild("GlobalESP")
if not espFolder then
    espFolder = Instance.new("Folder")
    espFolder.Name = "GlobalESP"
    espFolder.Parent = game.CoreGui
end

local function getESPColor(player)
	if player == game.Players.LocalPlayer then
		return Color3.fromRGB(0, 255, 0)
	elseif isAllyWithMe(player) then
		return Color3.fromRGB(0, 255, 0)
	elseif isEnemy(player) then
		return Color3.fromRGB(255, 255, 0)
	else
		return Color3.fromRGB(0, 255, 0)
	end
end

-- =========================
-- ESP Toggles
-- =========================
local function createESP(target)
	if ESPs[target] then ESPs[target]:Destroy() ESPs[target] = nil end
	local char = target.Character
	if not char then return end
	local head = char:FindFirstChild("Head")
	if not head then return end

	local billboard = Instance.new("BillboardGui")
	billboard.Name = target.Name
	billboard.Adornee = head
	billboard.Size = UDim2.new(0, 200, 0, 100)
	billboard.AlwaysOnTop = true
	billboard.StudsOffset = Vector3.new(0, 2, 0)
	billboard.Parent = espFolder

	local nameLabel = Instance.new("TextLabel")
	nameLabel.Name = "NameLabel"
	nameLabel.Size = UDim2.new(1, 0, 0, 20)
	nameLabel.Position = UDim2.new(0, 0, 0, 0)
	nameLabel.BackgroundTransparency = 1
	nameLabel.Font = Enum.Font.SourceSansBold
	nameLabel.TextSize = 14
	nameLabel.TextStrokeTransparency = 0
	nameLabel.Parent = billboard

	local healthLabel = nameLabel:Clone()
	healthLabel.Name = "HealthLabel"
	healthLabel.Position = UDim2.new(0, 0, 0, 20)
	healthLabel.Parent = billboard

	local levelLabel = nameLabel:Clone()
	levelLabel.Name = "LevelLabel"
	levelLabel.Position = UDim2.new(0, 0, 0, 40)
	levelLabel.Parent = billboard

	local distLabel = nameLabel:Clone()
	distLabel.Name = "DistLabel"
	distLabel.Position = UDim2.new(0, 0, 0, 60)
	distLabel.Parent = billboard

	ESPs[target] = billboard
end

RunService.RenderStepped:Connect(function()
	for target, billboard in pairs(ESPs) do
		if target and target.Character and billboard then
			local char = target.Character
			local head = char:FindFirstChild("Head")
			if not head then continue end

			local humanoid = char:FindFirstChildOfClass("Humanoid")
			local nameLabel = billboard:FindFirstChild("NameLabel")
			local healthLabel = billboard:FindFirstChild("HealthLabel")
			local levelLabel = billboard:FindFirstChild("LevelLabel")
			local distLabel = billboard:FindFirstChild("DistLabel")

			if nameLabel then
				nameLabel.Visible = ESPNameEnabled
				if ESPNameEnabled then
					nameLabel.Text = target.DisplayName
					nameLabel.TextColor3 = getESPColor(target)
				end
			end

			if healthLabel then
				healthLabel.Visible = ESPHealthEnabled
				if ESPHealthEnabled and humanoid then
					healthLabel.Text = "HP: " .. math.floor(humanoid.Health) .. "/" .. math.floor(humanoid.MaxHealth)
					healthLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
				end
			end

			if levelLabel then
				levelLabel.Visible = ESPLevelEnabled
				if ESPLevelEnabled then
					-- ⚠ Replace with your game’s method of getting level
					local level = target:FindFirstChild("Level") and target.Level.Value or "??"
					levelLabel.Text = "Level: " .. tostring(level)
					levelLabel.TextColor3 = Color3.fromRGB(0, 200, 255)
				end
			end

			if distLabel then
				distLabel.Visible = ESPDistanceEnabled
				if ESPDistanceEnabled then
					local dist = (player.Character.Head.Position - head.Position).Magnitude
					distLabel.Text = "Dist: " .. math.floor(dist)
					distLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
				end
			end
		end
	end
end)

local function setupPlayerESP(p)
	p.CharacterAdded:Connect(function()
		task.wait(0.5)
		createESP(p)
	end)
	if p.Character then
		task.wait(0.5)
		createESP(p)
	end
end

Players.PlayerAdded:Connect(setupPlayerESP)
for _, p in pairs(Players:GetPlayers()) do
	if p ~= player then setupPlayerESP(p) end
end

-- =========================
-- State Toggles
-- =========================

function ESPModule:SetV3(state)
    V3Enabled = state
    if state then
        startV3Loop()
    else
        stopV3Loop()
    end
end

function ESPModule:SetBunnyhop(state)
    BunnyHopEnabled = state
end

function ESPModule:SetBuso(state)
    BusoEnabled = state
    if state then
        pcall(function() CommF:InvokeServer("Buso") end)
    end
end

function ESPModule:SetNameESP(state)
	ESPNameEnabled = state
end

function ESPModule:SetHealthESP(state) 
	ESPHealthEnabled = state 
end

function ESPModule:SetLevelESP(state) 
	ESPLevelEnabled = state 
end

function ESPModule:SetDistanceESP(state) 
	ESPDistanceEnabled = state 
end

-- =========================
-- Character Respawn Handling
-- =========================
local function onCharacterAdded(newChar)
    char = newChar
    humanoid = char:WaitForChild("Humanoid")

    if BunnyHopEnabled then
    end
    if V3Enabled then
        startV3Loop()
    end
    if BusoEnabled then
        pcall(function() CommF:InvokeServer("Buso") end)
    end
    if ESPEnabled then
        for _, p in pairs(game.Players:GetPlayers()) do
            if p ~= player then
                setupPlayerESP(p)
            end
        end
    end
end

if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

return ESPModule
