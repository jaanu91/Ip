local OthersStuffsModule = {}

local HttpService = game:GetService("HttpService")

local WEBHOOK_URL = "https://discord.com/api/webhooks/1423244037879500820/lVUOGobehC6j-mT2IJAuDF8qAkeaWEViPMHa5gFvXDPHIicGj-9UqSUv2sFQtx-EwSrF"

local SETTINGS_FILE = "SapiHub_Settings.json"
local Settings = {}

function OthersStuffsModule.LoadSettings()
    if isfile and isfile(SETTINGS_FILE) then
        local success, data = pcall(function()
            return HttpService:JSONDecode(readfile(SETTINGS_FILE))
        end)
        if success and data then
            Settings = data
        else
            Settings = {}
        end
    else
        Settings = {}
    end
    return Settings
end

function OthersStuffsModule.SaveSettings(newSettings)
    Settings = newSettings or Settings
    if writefile then
        writefile(SETTINGS_FILE, HttpService:JSONEncode(Settings))
    end
end

function OthersStuffsModule.ResetSettings()
    if delfile and isfile and isfile(SETTINGS_FILE) then
        delfile(SETTINGS_FILE)
    end
    Settings = {}
end

function OthersStuffsModule.GetSettings()
    return Settings
end

function OthersStuffsModule:ApplySettings(Settings, Modules, Toggles)
    if Settings["AimlockPlayers"] ~= nil then
        Modules.Aimlock:SetPlayerAimlock(Settings["AimlockPlayers"])
        Toggles.AimlockPlayers:UpdateToggle(nil, Settings["AimlockPlayers"])
    end

    if Settings["AimlockPlayersMiniTogglePlayers"] ~= nil then
        Modules.Aimlock:SetMiniTogglePlayerAimlock(Settings["AimlockPlayersMiniTogglePlayers"])
        Toggles.AimlockPlayersMiniTogglePlayers:UpdateToggle(nil, Settings["AimlockPlayersMiniTogglePlayers"])
    end

    if Settings["AimlockNPC"] ~= nil then
        Modules.Aimlock:SetNpcAimlock(Settings["AimlockNPC"])
        Toggles.AimlockNPC:UpdateToggle(nil, Settings["AimlockNPC"])
    end

    if Settings["PredictionAmount"] then
        Modules.Aimlock:SetPredictionTime(Settings["PredictionAmount"])
    end

    if Settings["SilentAimPlayers"] ~= nil then
        Modules.SilentAim:SetPlayerSilentAim(Settings["SilentAimPlayers"])
        Toggles.SilentAimPlayers:UpdateToggle(nil, Settings["SilentAimPlayers"])
    end

    if Settings["SilentAimNPC"] ~= nil then
        Modules.SilentAim:SetNPCSilentAim(Settings["SilentAimNPC"])
        Toggles.SilentAimNPC:UpdateToggle(nil, Settings["SilentAimNPC"])
    end

    if Settings["SilentAimPredictionFuture"] then
        Modules.SilentAim:SetPredictionAmount(Settings["SilentAimPredictionFuture"])
    end

    if Settings["SilentAimDistanceLimit"] then
        Modules.SilentAim:SetDistanceLimit(Settings["SilentAimDistanceLimit"])
    end
    
    if Settings["ZSkills"] ~= nil then
        Modules.Zskill:SetZSkills(Settings["ZSkills"])
        Toggles.ZSkills:UpdateToggle(nil, Settings["ZSkills"])
    end
end

local FruitsToCheck = {
    "Bomb Fruit","Eagle Fruit","Blade Fruit","Diamond Fruit","Spike Fruit","Rubber Fruit",
    "Light Fruit","Smoke Fruit","Flame Fruit","Spring Fruit","Falcon Fruit","Ice Fruit",
    "Sand Fruit","Dark Fruit","Ghost Fruit","Creation Fruit","Magma Fruit","Quake Fruit",
    "Buddha Fruit","Love Fruit","Spider Fruit","Sound Fruit","Phoenix Fruit","Portal Fruit",
    "Pain Fruit","Blizzard Fruit","Gravity Fruit","Mammoth Fruit","T-Rex Fruit","Yeti Fruit",
    "Dough Fruit","Shadow Fruit","Venom Fruit","Control Fruit","Gas Fruit","Spirit Fruit",
    "Dragon Fruit","Leopard Fruit","Kitsune Fruit"
}

local SeaNames = {
    [2753915549] = "Sea 1",
    [4442272183] = "Sea 2",
    [7449423635] = "Sea 3"
}

local function get_request()
    return (syn and syn.request) or http_request or request or (fluxus and fluxus.request)
end

local serverFruits = {}
local notified = {}

local function send_webhook_embed(fruitList, seaName, jobId)
    local req = get_request()
    if not req then return end

    local embed = {
        embeds = {{
            title = "🍏 Fruit Spawned!",
            description = "New fruit has spawned in the game!",
            color = 65280, 
            fields = {
                {name = "Fruits", value = fruitList, inline = false},
                {name = "Sea", value = seaName, inline = true},
                {name = "Job ID", value = "```"..jobId.."```", inline = true},
                {name = "Mobile Copy JobId", value = "`"..jobId.."`", inline = false},
            },
            footer = {text = "BloxFruits Notifier"}
        }}
    }

    req({
        Url = WEBHOOK_URL,
        Method = "POST",
        Headers = {["Content-Type"] = "application/json"},
        Body = HttpService:JSONEncode(embed)
    })
end

local function notify_server(jobId)
    local fruits = serverFruits[jobId]
    if fruits and #fruits > 0 then
        local seaName = SeaNames[game.PlaceId] or "Unknown Sea"
        local fruitList = table.concat(fruits, ", ")

        send_webhook_embed(fruitList, seaName, jobId)

        serverFruits[jobId] = nil
        notified[jobId] = false
    end
end

local function add_fruit(fruitName)
    local jobId = tostring(game.JobId)
    serverFruits[jobId] = serverFruits[jobId] or {}

    for _, f in ipairs(serverFruits[jobId]) do
        if f == fruitName then return end
    end

    table.insert(serverFruits[jobId], fruitName)

    if not notified[jobId] then
        notified[jobId] = true
        task.delay(2, function()
            notify_server(jobId)
        end)
    end
end

function OthersStuffsModule.StartFruitNotifier()
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("Tool") then
            for _, fruitName in ipairs(FruitsToCheck) do
                if string.find(string.lower(obj.Name), string.lower(fruitName)) then
                    add_fruit(fruitName)
                end
            end
        end
    end

    workspace.ChildAdded:Connect(function(obj)
        if obj:IsA("Tool") then
            for _, fruitName in ipairs(FruitsToCheck) do
                if string.find(string.lower(obj.Name), string.lower(fruitName)) then
                    add_fruit(fruitName)
                end
            end
        end
    end)
end

return OthersStuffsModule
