local OthersStuffsModule = {}

local HttpService = game:GetService("HttpService")

-- Your Webhook
local WEBHOOK_URL = "https://discord.com/api/webhooks/1423244037879500820/lVUOGobehC6j-mT2IJAuDF8qAkeaWEViPMHa5gFvXDPHIicGj-9UqSUv2sFQtx-EwSrF"

-- SETTINGS FILE
local SETTINGS_FILE = "SapiHub_Settings.json"
local Settings = {}

-- üîπ Load Settings
function OthersStuffsModule.LoadSettings()
    if isfile and isfile(SETTINGS_FILE) then
        local success, data = pcall(function()
            return HttpService:JSONDecode(readfile(SETTINGS_FILE))
        end)
        if success and data then
            Settings = data
        else
            Settings = {}
        end
    else
        Settings = {}
    end
    return Settings
end

-- üîπ Save Settings
function OthersStuffsModule.SaveSettings(newSettings)
    Settings = newSettings or Settings
    if writefile then
        writefile(SETTINGS_FILE, HttpService:JSONEncode(Settings))
    end
end

-- üîπ Reset Settings
function OthersStuffsModule.ResetSettings()
    if delfile and isfile and isfile(SETTINGS_FILE) then
        delfile(SETTINGS_FILE)
    end
    Settings = {}
end

-- üîπ Get Settings Table (so main script can modify)
function OthersStuffsModule.GetSettings()
    return Settings
end

-- Fruits to check
local FruitsToCheck = {
    "Bomb Fruit","Eagle Fruit","Blade Fruit","Diamond Fruit","Spike Fruit","Rubber Fruit",
    "Light Fruit","Smoke Fruit","Flame Fruit","Spring Fruit","Falcon Fruit","Ice Fruit",
    "Sand Fruit","Dark Fruit","Ghost Fruit","Creation Fruit","Magma Fruit","Quake Fruit",
    "Buddha Fruit","Love Fruit","Spider Fruit","Sound Fruit","Phoenix Fruit","Portal Fruit",
    "Pain Fruit","Blizzard Fruit","Gravity Fruit","Mammoth Fruit","T-Rex Fruit","Yeti Fruit",
    "Dough Fruit","Shadow Fruit","Venom Fruit","Control Fruit","Gas Fruit","Spirit Fruit",
    "Dragon Fruit","Leopard Fruit","Kitsune Fruit"
}

-- Sea Names
local SeaNames = {
    [2753915549] = "Sea 1",
    [4442272183] = "Sea 2",
    [7449423635] = "Sea 3"
}

-- Executor request handler
local function get_request()
    return (syn and syn.request) or http_request or request or (fluxus and fluxus.request)
end

-- Send Webhook
local function send_webhook(content)
    local req = get_request()
    if not req then return end

    local payload = HttpService:JSONEncode({content = content})
    req({
        Url = WEBHOOK_URL,
        Method = "POST",
        Headers = {["Content-Type"] = "application/json"},
        Body = payload
    })
end

-- Storage
local serverFruits = {}
local notified = {}

-- Notify Function
local function notify_server(jobId)
    local fruits = serverFruits[jobId]
    if fruits and #fruits > 0 then
        local seaName = SeaNames[game.PlaceId] or "Unknown Sea"
        local fruitList = table.concat(fruits, ", ")

        local msg = string.format(
            "üçè Fruit Spawned: **%s**\nüåä Sea: %s\nüÜî JobId: ```%s```\nüì± Mobile Copy JobId:\n`%s`",
            fruitList, seaName, jobId, jobId
        )

        send_webhook(msg)
        serverFruits[jobId] = nil
        notified[jobId] = false
    end
end

-- Add Fruit
local function add_fruit(fruitName)
    local jobId = tostring(game.JobId)
    serverFruits[jobId] = serverFruits[jobId] or {}

    for _, f in ipairs(serverFruits[jobId]) do
        if f == fruitName then return end
    end

    table.insert(serverFruits[jobId], fruitName)

    if not notified[jobId] then
        notified[jobId] = true
        task.delay(2, function()
            notify_server(jobId)
        end)
    end
end

-- Detect Fruits
function OthersStuffsModule.StartFruitNotifier()
    -- Check existing fruits in workspace
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("Tool") then
            for _, fruitName in ipairs(FruitsToCheck) do
                if string.find(string.lower(obj.Name), string.lower(fruitName)) then
                    add_fruit(fruitName)
                end
            end
        end
    end

    -- Detect new fruits
    workspace.ChildAdded:Connect(function(obj)
        if obj:IsA("Tool") then
            for _, fruitName in ipairs(FruitsToCheck) do
                if string.find(string.lower(obj.Name), string.lower(fruitName)) then
                    add_fruit(fruitName)
                end
            end
        end
    end)
end

return OthersStuffsModule
