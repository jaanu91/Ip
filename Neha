local RaidsModule = {}

local player = game.Players.LocalPlayer
local backpack = player:WaitForChild("Backpack")
local character = player.Character or player.CharacterAdded:Wait()
local RunService = game:GetService("RunService")

local Auto_Buy_Chips_Raid = false
local Auto_StartRaid = false
local AutoNextIsland = false
local AutoKill = false
local FastAttackEnabled = false
local bringmob = false
local AutoAwakenAbilities = false
local Autofruit = false

local SelectChip = nil
local weaponsToCheck = {"Godhuman", "Sanguine Art", "Dragon Talon"}

local function checkForWeapons()
	for _, weaponName in ipairs(weaponsToCheck) do
		if backpack:FindFirstChild(weaponName) or character:FindFirstChild(weaponName) then
			return weaponName
		end
	end
	return nil
end

local SelectWeapon = checkForWeapons()

function AutoHaki()
    if not game:GetService("Players").LocalPlayer.Character:FindFirstChild("HasBuso") then
        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("Buso")
    end
end

function EquipTool(ToolSe)
    if game.Players.LocalPlayer.Backpack:FindFirstChild(ToolSe) then
        local tool = game.Players.LocalPlayer.Backpack:FindFirstChild(ToolSe)
        wait()
        game.Players.LocalPlayer.Character.Humanoid:EquipTool(tool)
    end
end

do
    local _ENV = (getgenv or getrenv or getfenv)()

    local function SafeWaitForChild(parent, childName)
        local success, result = pcall(function()
            return parent:WaitForChild(childName)
        end)
        if not success or not result then
            warn("noooooo: " .. childName)
        end
        return result
    end

    local function WaitChilds(path, ...)
        local last = path
        for _, child in {...} do
            last = last:FindFirstChild(child) or SafeWaitForChild(last, child)
            if not last then break end
        end
        return last
    end

    local VirtualInputManager = game:GetService("VirtualInputManager")
    local CollectionService = game:GetService("CollectionService")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local TeleportService = game:GetService("TeleportService")
    local RunService = game:GetService("RunService")
    local Players = game:GetService("Players")
    local Player = Players.LocalPlayer

    if not Player then
        warn("Không tìm thấy người chơi cục bộ.")
        return
    end

    local Remotes = SafeWaitForChild(ReplicatedStorage, "Remotes")
    if not Remotes then return end

    local Validator = SafeWaitForChild(Remotes, "Validator")
    local CommF = SafeWaitForChild(Remotes, "CommF_")
    local CommE = SafeWaitForChild(Remotes, "CommE")

    local ChestModels = SafeWaitForChild(workspace, "ChestModels")
    local WorldOrigin = SafeWaitForChild(workspace, "_WorldOrigin")
    local Characters = SafeWaitForChild(workspace, "Characters")
    local Enemies = SafeWaitForChild(workspace, "Enemies")
    local Map = SafeWaitForChild(workspace, "Map")

    local EnemySpawns = SafeWaitForChild(WorldOrigin, "EnemySpawns")
    local Locations = SafeWaitForChild(WorldOrigin, "Locations")

    local RenderStepped = RunService.RenderStepped
    local Heartbeat = RunService.Heartbeat
    local Stepped = RunService.Stepped

    local Modules = SafeWaitForChild(ReplicatedStorage, "Modules")
    local Net = SafeWaitForChild(Modules, "Net")

    local sethiddenproperty = sethiddenproperty or function(...) return ... end
    local setupvalue = setupvalue or (debug and debug.setupvalue)
    local getupvalue = getupvalue or (debug and debug.getupvalue)

    local Settings = {
        AutoClick = true,
        ClickDelay = 0,
    }

    local Module = {}

    Module.FastAttack = (function()
        if _ENV.rz_FastAttack then
            return _ENV.rz_FastAttack
        end

        local FastAttack = {
            Distance = 100,
            attackMobs = true,
            attackPlayers = true,
            Equipped = nil
        }

        local RegisterAttack = SafeWaitForChild(Net, "RE/RegisterAttack")
        local RegisterHit = SafeWaitForChild(Net, "RE/RegisterHit")

        local function IsAlive(character)
        return character and character:FindFirstChild("Humanoid") and character.Humanoid.Health > 0
        end

        local function ProcessEnemies(OthersEnemies, Folder)
            local BasePart = nil
            for _, Enemy in Folder:GetChildren() do
                local Head = Enemy:FindFirstChild("Head")
                if Head and IsAlive(Enemy) and Player:DistanceFromCharacter(Head.Position) < FastAttack.Distance then
                    if Enemy ~= Player.Character then
                        table.insert(OthersEnemies, { Enemy, Head })
                        BasePart = Head
                    end
                end
            end
            return BasePart
        end

        function FastAttack:Attack(BasePart, OthersEnemies)
            if not BasePart or #OthersEnemies == 0 then return end
            RegisterAttack:FireServer(Settings.ClickDelay or 0)
            RegisterHit:FireServer(BasePart, OthersEnemies)
        end

        function FastAttack:AttackNearest()
            local OthersEnemies = {}
            local Part1 = ProcessEnemies(OthersEnemies, Enemies)
            local Part2 = ProcessEnemies(OthersEnemies, Characters)
            if #OthersEnemies > 0 then
                self:Attack(Part1 or Part2, OthersEnemies)
            else
                task.wait(0)
            end
        end

        function FastAttack:BladeHits()
            local Equipped = IsAlive(Player.Character) and Player.Character:FindFirstChildOfClass("Tool")
            if Equipped and Equipped.ToolTip ~= "Gun" then
                self:AttackNearest()
            else
                task.wait(0)
            end
        end

        task.spawn(function()
            while task.wait(Settings.ClickDelay) do
                if Settings.AutoClick and FastAttackEnabled then
                    FastAttack:BladeHits()
                end
            end
        end)

        _ENV.rz_FastAttack = FastAttack
        return FastAttack
    end)()
end

function Tween2(KG)
    local Distance = (KG.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
    local Speed = 160
    local tweenInfo = TweenInfo.new(Distance / Speed, Enum.EasingStyle.Linear)
    local tween = game:GetService("TweenService"):Create(game.Players.LocalPlayer.Character.HumanoidRootPart, tweenInfo, {
        CFrame = KG
    })
    tween:Play()
    if _G.StopTween2 then
        tween:Cancel()
    end
    _G.Clip2 = true
    wait(Distance / Speed)
    _G.Clip2 = false
end
function BKP(Point)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Point
    task.wait()
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Point
end
TweenSpeed = 350
function Tween(KG)
    local Distance = (KG.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
    local Speed = TweenSpeed  
    local tweenInfo = TweenInfo.new(Distance / Speed, Enum.EasingStyle.Linear)
    local tween = game:GetService("TweenService"):Create(game.Players.LocalPlayer.Character.HumanoidRootPart, tweenInfo, {
        CFrame = KG
    })
    tween:Play()
    if _G.StopTween then
        tween:Cancel()
    end
end

task.spawn(function()
	while task.wait(0.3) do
		if bringmob 
			and game.Players.LocalPlayer.Character 
			and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") 
		then
			pcall(function()
				local player = game.Players.LocalPlayer
				local char = player.Character
				local hrp = char.HumanoidRootPart
				local enemies = workspace:FindFirstChild("Enemies")

				if not enemies then return end

				local nearestEnemy = nil
				local nearestDistance = math.huge

				for _, enemy in pairs(enemies:GetChildren()) do
					local hrpEnemy = enemy:FindFirstChild("HumanoidRootPart")
					local hum = enemy:FindFirstChild("Humanoid")

					if hrpEnemy and hum and hum.Health > 0 then
						local dist = (hrpEnemy.Position - hrp.Position).Magnitude
						if dist < nearestDistance then
							nearestEnemy = hrpEnemy
							nearestDistance = dist
						end
					end
				end

				if nearestEnemy then
					local abovePos = nearestEnemy.CFrame * CFrame.new(0, 25, 0)
					Tween(abovePos)
				end
			end)
		end
	end
end)

local workspace = game:GetService("Workspace")
local PlaceId = game.PlaceId

local World2ID = 4442272183
local World3ID = 7449423635

local World2 = (PlaceId == World2ID)
local World3 = (PlaceId == World3ID)

task.spawn(function()
    while task.wait(2) do
        if Auto_Buy_Chips_Raid and SelectChip then
            pcall(function()
                local args = {"RaidsNpc", "Select", SelectChip}
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
            end)
        end
    end
end)

spawn(function()
    local lastClickTime = 0
    local cooldown = 20 

    RunService.Heartbeat:Connect(function()
        if not Auto_StartRaid then
            return
        end

        if tick() - lastClickTime < cooldown then
            return
        end

        pcall(function()
            local raidMap = workspace:FindFirstChild("Map") and workspace.Map:FindFirstChild("RaidMap")
            if not raidMap then return end

            local hasIslands = false
            for _, island in ipairs(raidMap:GetChildren()) do
                if island.Name:match("RaidIsland") then
                    hasIslands = true
                    break
                end
            end

            if not hasIslands then
                if World2 and workspace.Map:FindFirstChild("CircleIsland") then
                    fireclickdetector(workspace.Map.CircleIsland.RaidSummon2.Button.Main.ClickDetector)
                    lastClickTime = tick()
                elseif World3 and workspace.Map:FindFirstChild("Boat Castle") then
                    fireclickdetector(workspace.Map["Boat Castle"].RaidSummon2.Button.Main.ClickDetector)
                    lastClickTime = tick()
                end
            end
        end)
    end)
end)

spawn(function()
    local visitedIslands = {}
    while task.wait(0.5) do
        if AutoNextIsland then
            pcall(function()
                local character = game.Players.LocalPlayer.Character
                if not (character and character:FindFirstChild("HumanoidRootPart")) then return end
                local hrp = character.HumanoidRootPart
                local locationsFolder = workspace:FindFirstChild("_WorldOrigin") and workspace._WorldOrigin:FindFirstChild("Locations")
                if not locationsFolder then return end

                local pos = hrp.Position

                if (pos - Vector3.new(-6438.73535, 250.645355, -4501.50684)).Magnitude < 1
                or (pos - Vector3.new(-5017.40869, 314.844055, -2823.0127)).Magnitude < 1 then
                    visitedIslands = {}
                end

                for _, island in ipairs(locationsFolder:GetChildren()) do
                    if island.Name:match("^Island %d+") and not visitedIslands[island.Name] then
                        local islandPos
                        if island:IsA("BasePart") then
                            islandPos = island.Position
                        elseif island:FindFirstChildWhichIsA("BasePart") then
                            islandPos = island:FindFirstChildWhichIsA("BasePart").Position
                        elseif island.CFrame then
                            islandPos = island.CFrame.Position
                        end

                        if islandPos then
                            local dist = (islandPos - pos).Magnitude
                            if dist <= 500 then
                                Tween(island.CFrame or CFrame.new(islandPos))
                                visitedIslands[island.Name] = true

                                AutoNextIsland = false
                                wait()
                                AutoNextIsland = true
                                break
                            end
                        end
                    end
                end
            end)
        end
    end
end)

task.spawn(function()
    while task.wait(0.5) do
        if AutoKill then
	        EquipTool(SelectWeapon)
			AutoHaki()
        end
    end
end)

spawn(
    function()
        while task.wait() do
            if AutoAwakenAbilities then
                pcall(
                    function()
                        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("Awakener", "Awaken")
                    end
                )
            end
        end
    end
)

spawn(function()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local CommF = ReplicatedStorage.Remotes.CommF_

    local fruits = {
        "Rocket-Rocket",
        "Spin-Spin",
        "Chop-Chop",
        "Spring-Spring",
        "Bomb-Bomb",
        "Smoke-Smoke",
        "Spike-Spike",
        "Flame-Flame",
        "Falcon-Falcon",
        "Ice-Ice",
        "Sand-Sand",
        "Dark-Dark",
        "Ghost-Ghost",
        "Diamond-Diamond",
        "Light-Light",
        "Rubber-Rubber",
        "Barrier-Barrier"
    }

    local loadedFruit = nil

    while task.wait(1) do
        pcall(function()
            if Autofruit then
                local fruitFound = false

                for _, fruitName in ipairs(fruits) do
                    if loadedFruit ~= fruitName then
                        local success = CommF:InvokeServer("LoadFruit", fruitName)
                        if success then
                            loadedFruit = fruitName
                            fruitFound = true
                            break
                        end
                    else
                        fruitFound = true
                        break
                    end
                end

                if not fruitFound then
                    loadedFruit = nil
                    task.wait(10) 
                end
            else
                task.wait(2) 
            end
        end)
    end
end)

function RaidsModule:SetBuyChip(state: boolean)
    Auto_Buy_Chips_Raid = state
end

function RaidsModule:SetStartRaid(state: boolean)
    Auto_StartRaid = state
end

function RaidsModule:SetAutoRaid(state: boolean)
    AutoKill = state
    bringmob = state
    FastAttackEnabled = state
end

function RaidsModule:SetAutoAwaken(state: boolean)
    AutoAwakenAbilities = state
end

function RaidsModule:SetGetFruits(state: boolean)
    Autofruit = state
end

function RaidsModule:SetNextIsland(state: boolean)
    AutoNextIsland = state
    if not state then
	    _G.AutoNear = false
    end
end

function RaidsModule:SetSelectChip(chip: string)
    SelectChip = chip
end

return RaidsModule
