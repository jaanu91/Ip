local RaidsModule = {}

local player = game.Players.LocalPlayer
local backpack = player:WaitForChild("Backpack")
local character = player.Character or player.CharacterAdded:Wait()
local RunService = game:GetService("RunService")
local workspace = game:GetService("Workspace")

local Auto_Buy_Chips_Raid = false
local Auto_StartRaid = false
local AutoNextIsland = false
local AutoKill = false
local FastAttackEnabled = false
local bringmob = false
local AutoAwakenAbilities = false
local Autofruit = false
local TeleportToFruits = false

local SelectChip = nil
local weaponsToCheck = {"Godhuman", "Sanguine Art", "Dragon Talon"}

local function checkForWeapons()
	for _, weaponName in ipairs(weaponsToCheck) do
		if backpack:FindFirstChild(weaponName) or character:FindFirstChild(weaponName) then
			return weaponName
		end
	end
	return nil
end

local PlaceId = game.PlaceId
local World2ID = 4442272183
local World3ID = 7449423635

local World2 = (PlaceId == World2ID)
local World3 = (PlaceId == World3ID)

local SelectWeapon = checkForWeapons()

function AutoHaki()
    if not game:GetService("Players").LocalPlayer.Character:FindFirstChild("HasBuso") then
        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("Buso")
    end
end

function EquipTool(ToolSe)
    if game.Players.LocalPlayer.Backpack:FindFirstChild(ToolSe) then
        local tool = game.Players.LocalPlayer.Backpack:FindFirstChild(ToolSe)
        wait()
        game.Players.LocalPlayer.Character.Humanoid:EquipTool(tool)
    end
end

do
    local _ENV = (getgenv or getrenv or getfenv)()

    local function SafeWaitForChild(parent, childName)
        local success, result = pcall(function()
            return parent:WaitForChild(childName)
        end)
        if not success or not result then
            warn("noooooo: " .. childName)
        end
        return result
    end

    local function WaitChilds(path, ...)
        local last = path
        for _, child in {...} do
            last = last:FindFirstChild(child) or SafeWaitForChild(last, child)
            if not last then break end
        end
        return last
    end

    local VirtualInputManager = game:GetService("VirtualInputManager")
    local CollectionService = game:GetService("CollectionService")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local TeleportService = game:GetService("TeleportService")
    local RunService = game:GetService("RunService")
    local Players = game:GetService("Players")
    local Player = Players.LocalPlayer

    if not Player then
        warn("Không tìm thấy người chơi cục bộ.")
        return
    end

    local Remotes = SafeWaitForChild(ReplicatedStorage, "Remotes")
    if not Remotes then return end

    local Validator = SafeWaitForChild(Remotes, "Validator")
    local CommF = SafeWaitForChild(Remotes, "CommF_")
    local CommE = SafeWaitForChild(Remotes, "CommE")

    local ChestModels = SafeWaitForChild(workspace, "ChestModels")
    local WorldOrigin = SafeWaitForChild(workspace, "_WorldOrigin")
    local Characters = SafeWaitForChild(workspace, "Characters")
    local Enemies = SafeWaitForChild(workspace, "Enemies")
    local Map = SafeWaitForChild(workspace, "Map")

    local EnemySpawns = SafeWaitForChild(WorldOrigin, "EnemySpawns")
    local Locations = SafeWaitForChild(WorldOrigin, "Locations")

    local RenderStepped = RunService.RenderStepped
    local Heartbeat = RunService.Heartbeat
    local Stepped = RunService.Stepped

    local Modules = SafeWaitForChild(ReplicatedStorage, "Modules")
    local Net = SafeWaitForChild(Modules, "Net")

    local sethiddenproperty = sethiddenproperty or function(...) return ... end
    local setupvalue = setupvalue or (debug and debug.setupvalue)
    local getupvalue = getupvalue or (debug and debug.getupvalue)

    local Settings = {
        AutoClick = true,
        ClickDelay = 0,
    }

    local Module = {}

    Module.FastAttack = (function()
        if _ENV.rz_FastAttack then
            return _ENV.rz_FastAttack
        end

        local FastAttack = {
            Distance = 100,
            attackMobs = true,
            attackPlayers = true,
            Equipped = nil
        }

        local RegisterAttack = SafeWaitForChild(Net, "RE/RegisterAttack")
        local RegisterHit = SafeWaitForChild(Net, "RE/RegisterHit")

        local function IsAlive(character)
        return character and character:FindFirstChild("Humanoid") and character.Humanoid.Health > 0
        end

        local function ProcessEnemies(OthersEnemies, Folder)
            local BasePart = nil
            for _, Enemy in Folder:GetChildren() do
                local Head = Enemy:FindFirstChild("Head")
                if Head and IsAlive(Enemy) and Player:DistanceFromCharacter(Head.Position) < FastAttack.Distance then
                    if Enemy ~= Player.Character then
                        table.insert(OthersEnemies, { Enemy, Head })
                        BasePart = Head
                    end
                end
            end
            return BasePart
        end

        function FastAttack:Attack(BasePart, OthersEnemies)
            if not BasePart or #OthersEnemies == 0 then return end
            RegisterAttack:FireServer(Settings.ClickDelay or 0)
            RegisterHit:FireServer(BasePart, OthersEnemies)
        end

        function FastAttack:AttackNearest()
            local OthersEnemies = {}
            local Part1 = ProcessEnemies(OthersEnemies, Enemies)
            local Part2 = ProcessEnemies(OthersEnemies, Characters)
            if #OthersEnemies > 0 then
                self:Attack(Part1 or Part2, OthersEnemies)
            else
                task.wait(0)
            end
        end

        function FastAttack:BladeHits()
            local Equipped = IsAlive(Player.Character) and Player.Character:FindFirstChildOfClass("Tool")
            if Equipped and Equipped.ToolTip ~= "Gun" then
                self:AttackNearest()
            else
                task.wait(0)
            end
        end

        task.spawn(function()
            while task.wait(Settings.ClickDelay) do
                if Settings.AutoClick and FastAttackEnabled then
                    FastAttack:BladeHits()
                end
            end
        end)

        _ENV.rz_FastAttack = FastAttack
        return FastAttack
    end)()
end

function Tween2(KG)
    local Distance = (KG.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
    local Speed = 160
    local tweenInfo = TweenInfo.new(Distance / Speed, Enum.EasingStyle.Linear)
    local tween = game:GetService("TweenService"):Create(game.Players.LocalPlayer.Character.HumanoidRootPart, tweenInfo, {
        CFrame = KG
    })
    tween:Play()
    if _G.StopTween2 then
        tween:Cancel()
    end
    _G.Clip2 = true
    wait(Distance / Speed)
    _G.Clip2 = false
end
function BKP(Point)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Point
    task.wait()
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Point
end
TweenSpeed = 350
function Tween(KG)
    local Distance = (KG.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
    local Speed = TweenSpeed  
    local tweenInfo = TweenInfo.new(Distance / Speed, Enum.EasingStyle.Linear)
    local tween = game:GetService("TweenService"):Create(game.Players.LocalPlayer.Character.HumanoidRootPart, tweenInfo, {
        CFrame = KG
    })
    tween:Play()
    if _G.StopTween then
        tween:Cancel()
    end
end

RunService.Heartbeat:Connect(function()
	if bringmob 
		and game.Players.LocalPlayer.Character 
		and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") 
	then
		pcall(function()
			local player = game.Players.LocalPlayer
			local char = player.Character
			local hrp = char:FindFirstChild("HumanoidRootPart")
			local enemies = workspace:FindFirstChild("Enemies")

			if not enemies or not hrp then return end

			local nearestEnemy = nil
			local nearestDistance = math.huge
			local MAX_RANGE = 250

			for _, enemy in pairs(enemies:GetChildren()) do
				local hrpEnemy = enemy:FindFirstChild("HumanoidRootPart")
				local hum = enemy:FindFirstChild("Humanoid")

				if hrpEnemy and hum and hum.Health > 0 then
					local dist = (hrpEnemy.Position - hrp.Position).Magnitude
					if dist < nearestDistance and dist <= MAX_RANGE then
						nearestEnemy = hrpEnemy
						nearestDistance = dist
					end
				end
			end

			if nearestEnemy then
				local abovePos = nearestEnemy.CFrame * CFrame.new(0, 25, 0)
				Tween(abovePos)
			else
				-- No enemy within range; ignore tween
			end
		end)
	end
	
	if TeleportToFruits then
		for _, v in pairs(workspace:GetChildren()) do
			if v:IsA("Tool") then
				local handle = v:FindFirstChild("Handle")
                if handle and handle:IsA("BasePart") then
					Tween(handle)
				end
			end
		end
	end
end)

task.spawn(function()
    while task.wait(2) do
        if Auto_Buy_Chips_Raid and SelectChip then
            pcall(function()
	            if game:GetService("Players")["LocalPlayer"].PlayerGui.Main.Timer.Visible == false then
					if not game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Special Microchip") then
		                local args = {"RaidsNpc", "Select", SelectChip}
		                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
					end
				end
            end)
        end
    end
end)

spawn(function()
    while wait(.1) do
        pcall(function()
            if Auto_StartRaid then
                if game:GetService("Players")["LocalPlayer"].PlayerGui.Main.Timer.Visible == false then
                    if game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Special Microchip") then
                        if World2 then
                            fireclickdetector(game:GetService("Workspace").Map.CircleIsland.RaidSummon2.Button.Main.ClickDetector)
                        elseif World3 then
                            fireclickdetector(game:GetService("Workspace").Map["Boat Castle"].RaidSummon2.Button.Main.ClickDetector)
                        end
                    end
                end
            end
        end)
    end
end)

spawn(function()
    while task.wait() do
        if AutoNextIsland then
            pcall(function()
                if game:GetService("Players")["LocalPlayer"].PlayerGui.Main.Timer.Visible == true then
                    if game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 5") then
                        Tween(game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 5").CFrame * CFrame.new(0,70,100))
                    elseif game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 4") then
                        Tween(game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 4").CFrame * CFrame.new(0,70,100))
                    elseif game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 3") then
                        Tween(game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 3").CFrame * CFrame.new(0,70,100))
                    elseif game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 2") then
                        Tween(game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 2").CFrame * CFrame.new(0,70,100))
                    elseif game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 1") then
                        Tween(game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 1").CFrame * CFrame.new(0,70,100))
                    end
                end
            end)
        end
    end
end)

task.spawn(function()
    while task.wait(0.5) do
        if AutoKill then
	        EquipTool(SelectWeapon)
			AutoHaki()
        end
    end
end)

spawn(
    function()
        while task.wait() do
            if AutoAwakenAbilities then
                pcall(
                    function()
                        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("Awakener", "Awaken")
                    end
                )
            end
        end
    end
)

spawn(function()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local CommF = ReplicatedStorage.Remotes.CommF_

    local fruits = {
        "Rocket-Rocket",
        "Spin-Spin",
        "Chop-Chop",
        "Spring-Spring",
        "Bomb-Bomb",
        "Smoke-Smoke",
        "Spike-Spike",
        "Flame-Flame",
        "Falcon-Falcon",
        "Ice-Ice",
        "Sand-Sand",
        "Dark-Dark",
        "Ghost-Ghost",
        "Diamond-Diamond",
        "Light-Light",
        "Rubber-Rubber",
        "Barrier-Barrier"
    }

    local loadedFruit = nil

    while task.wait(1) do
        pcall(function()
            if Autofruit then
                local fruitFound = false

                for _, fruitName in ipairs(fruits) do
                    if loadedFruit ~= fruitName then
                        local success = CommF:InvokeServer("LoadFruit", fruitName)
                        if success then
                            loadedFruit = fruitName
                            fruitFound = true
                            break
                        end
                    else
                        fruitFound = true
                        break
                    end
                end

                if not fruitFound then
                    loadedFruit = nil
                    task.wait(10) 
                end
            else
                task.wait(2) 
            end
        end)
    end
end)

function RaidsModule:SetBuyChip(state: boolean)
    Auto_Buy_Chips_Raid = state
end

function RaidsModule:SetStartRaid(state: boolean)
    Auto_StartRaid = state
end

function RaidsModule:SetAutoRaid(state: boolean)
    AutoKill = state
    bringmob = state
    FastAttackEnabled = state
end

function RaidsModule:SetAutoAwaken(state: boolean)
    AutoAwakenAbilities = state
end

function RaidsModule:SetTeleportFruits(state: boolean)
    TeleportToFruits = state
end

function RaidsModule:SetGetFruits(state: boolean)
    Autofruit = state
end

function RaidsModule:SetNextIsland(state: boolean)
    AutoNextIsland = state
    if not state then
	    _G.AutoNear = false
    end
end

function RaidsModule:SetSelectChip(chip: string)
    SelectChip = chip
end

return RaidsModule
