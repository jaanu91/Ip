local SilentAimModule = {}

Playersaimbot = nil
PlayersPosition = nil
NPCaimbot = nil
NPCPosition = nil

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local cam = workspace.CurrentCamera

local SilentAimPlayersEnabled = false
local SilentAimNPCsEnabled = false
local PredictionEnabled = false

local PredictionAmount = 0.1
local maxRange = 1000

local function getHRP(model)
    if not model or not model:FindFirstChild("HumanoidRootPart") then return nil end
    return model.HumanoidRootPart
end

local function getPredictedPosition(hrp)
    if not hrp then return nil end
    if not PredictionEnabled then
        return hrp.Position
    end

    local velocity = hrp.Velocity
    return hrp.Position + (velocity * PredictionAmount)
end

local function aimlockAt(targetPos, duration)
    if not targetPos then return end
    local oldCF = cam.CFrame
    cam.CFrame = CFrame.new(cam.CFrame.Position, targetPos)
    task.delay(duration or 1, function()
        cam.CFrame = oldCF
    end)
end

local function getClosestPlayer(lpHRP)
    local closest = nil
    local closestDist = math.huge
    for _, pl in ipairs(Players:GetPlayers()) do
        if pl ~= player and pl.Character and pl.Character.Parent ~= nil then
            local hrp = getHRP(pl.Character)
            if hrp then
                local dist = (hrp.Position - lpHRP.Position).Magnitude
                if dist <= maxRange and dist < closestDist then
                    closestDist = dist
                    closest = pl
                end
            end
        end
    end
    return closest
end

local function getClosestNPC(lpHRP)
    local enemiesFolder = workspace:FindFirstChild("Enemies")
    if not enemiesFolder then return nil end

    local closest = nil
    local closestDist = math.huge
    for _, npc in ipairs(enemiesFolder:GetChildren()) do
        if npc:IsA("Model") and npc:FindFirstChild("Humanoid") then
            local hrp = getHRP(npc)
            if hrp then
                local dist = (hrp.Position - lpHRP.Position).Magnitude
                if dist <= maxRange and dist < closestDist then
                    closestDist = dist
                    closest = npc
                end
            end
        end
    end
    return closest
end

RunService.Heartbeat:Connect(function()
    local lpChar = player.Character
    if not lpChar then return end
    local lpHRP = lpChar:FindFirstChild("HumanoidRootPart")
    if not lpHRP then return end

    if SilentAimPlayersEnabled then
        local closestPl = getClosestPlayer(lpHRP)
        if closestPl then
            Playersaimbot = closestPl.Name
            local hrp = getHRP(closestPl.Character)
            PlayersPosition = getPredictedPosition(hrp)
        else
            Playersaimbot, PlayersPosition = nil, nil
        end
    else
        Playersaimbot, PlayersPosition = nil, nil
    end

    if SilentAimNPCsEnabled then
        local closestNPC = getClosestNPC(lpHRP)
        if closestNPC then
            NPCaimbot = closestNPC.Name
            local hrp = getHRP(closestNPC)
            NPCPosition = getPredictedPosition(hrp)
        else
            NPCaimbot, NPCPosition = nil, nil
        end
    else
        NPCaimbot, NPCPosition = nil, nil
    end
end)

spawn(function()
    local success, gg = pcall(function() return getrawmetatable(game) end)
    if not success or not gg then return end
    local old = gg.__namecall
    if not old then return end

    setreadonly(gg, false)
    gg.__namecall = newcclosure(function(...)
        local method = getnamecallmethod()
        local args = {...}

        local targetPos = nil
        if SilentAimPlayersEnabled and PlayersPosition then
            targetPos = PlayersPosition
        elseif SilentAimNPCsEnabled and NPCPosition then
            targetPos = NPCPosition
        end

        if targetPos and tostring(method) == "FireServer" then
            if tostring(args[1]) == "RemoteEvent" then
                if tostring(args[2]) ~= "true" and tostring(args[2]) ~= "false" then
                    args[2] = targetPos
                    return old(unpack(args))
                end
            end
        end
        return old(...)
    end)
    setreadonly(gg, true)
end)

local mt = getrawmetatable(game)
local old = mt.__namecall

setreadonly(mt, false)
mt.__namecall = newcclosure(function(self, ...)
    local args = {...}
    local method = getnamecallmethod()

    -- Detect InvokeServer for Z skill
    if method == "InvokeServer" and args[1] == "Z" then
        local lpChar = game.Players.LocalPlayer.Character
        if lpChar then
            local tool = lpChar:FindFirstChildOfClass("Tool")
            -- Only trigger if Godhuman tool is equipped
            if tool and tool.Name == "Godhuman" then
                local targetPos = SilentAimModule.PlayersPosition or SilentAimModule.NPCPosition
                if targetPos then
                    -- Lock camera at the target for 1 sec
                    aimlockAt(targetPos, 1)
                end
            end
        end
    end

    return old(self, ...)
end)
setreadonly(mt, true)

function SilentAimModule:SetPlayerSilentAim(state)
    SilentAimPlayersEnabled = state
end

function SilentAimModule:SetNPCSilentAim(state)
    SilentAimNPCsEnabled = state
end

function SilentAimModule:SetDistanceLimit(num)
    if typeof(num) == "number" then
        maxRange = num
    end
end

function SilentAimModule:SetPrediction(state)
    PredictionEnabled = state
end

function SilentAimModule:SetPredictionAmount(num)
    if typeof(num) == "number" then
        PredictionAmount = num
    end
end

return SilentAimModule
