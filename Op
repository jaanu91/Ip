-- SilentAimModule (fixed)
local SilentAimModule = {}

local VSkillModule = loadstring(game:HttpGet("https://raw.githubusercontent.com/jaanu91/Ip/refs/heads/main/Kata"))()

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CollectionService = game:GetService("CollectionService")

local player = Players.LocalPlayer
local character = player and (player.Character or player.CharacterAdded:Wait()) or nil
local camera = workspace.CurrentCamera
local commE = nil
do
    local ok, remotes = pcall(function()
        local r = ReplicatedStorage:FindFirstChild("Remotes")
        return r
    end)
    if ok and remotes then
        commE = remotes:FindFirstChild("CommE")
    end
end

-- Local state
local SilentAimPlayersEnabled = false
local SilentAimNPCsEnabled    = false
local UserWantsPlayerAim      = false
local UserWantsNPCAim         = false
local PredictionEnabled       = false
local AutoKen                 = false

local playersAimbot   = nil
local playersPosition = nil
local npcAimbot       = nil
local npcPosition     = nil
local currentHighlight = nil
local currentTargetType = nil
local selectedPlayer = nil

local predictionAmount = 0.1
local maxRange = 1000

local function getHRP(model)
    if not model then return nil end
    return model:FindFirstChild("HumanoidRootPart")
end

local function getPredictedPosition(hrp)
    if not hrp then return nil end
    if not PredictionEnabled then
        return hrp.Position
    end
    return hrp.Position + (hrp.Velocity * predictionAmount)
end

local function isAllyWithMe(targetPlayer)
    if not player then return false end
    local myGui = player:FindFirstChild("PlayerGui")
    if not myGui then return false end

    local main = myGui:FindFirstChild("Main")
    if not main then return false end
    local alliesContainer = main:FindFirstChild("Allies")
        and main.Allies:FindFirstChild("Container")
        and main.Allies.Container:FindFirstChild("Allies")
        and main.Allies.Container.Allies:FindFirstChild("ScrollingFrame")

    if alliesContainer then
        for _, frame in pairs(alliesContainer:GetDescendants()) do
            if frame:IsA("ImageButton") and frame.Name == targetPlayer.Name then
                return true
            end
        end
    end
    return false
end

local function isEnemy(targetPlayer)
    if not targetPlayer or targetPlayer == player then
        return false
    end

    local myTeam = player.Team
    local targetTeam = targetPlayer.Team

    if myTeam and targetTeam then
        if myTeam.Name == "Pirates" and targetTeam.Name == "Marines" then
            return true
        elseif myTeam.Name == "Marines" and targetTeam.Name == "Pirates" then
            return true
        end

        if myTeam.Name == "Pirates" and targetTeam.Name == "Pirates" then
            if isAllyWithMe(targetPlayer) then
                return false
            end
            return true
        end

        if myTeam.Name == "Marines" and targetTeam.Name == "Marines" then
            return false
        end
    end

    return true
end

local function getClosestPlayer(lpHRP)
    if not lpHRP then return nil end
    local closest = nil
    local closestDist = math.huge
    for _, pl in ipairs(Players:GetPlayers()) do
        if pl ~= player and isEnemy(pl) and pl.Character and pl.Character.Parent ~= nil then
            local hum = pl.Character:FindFirstChildWhichIsA("Humanoid")
            local hrp = getHRP(pl.Character)
            if hum and hum.Health > 0 and hrp then
                local dist = (hrp.Position - lpHRP.Position).Magnitude
                if dist <= maxRange and dist < closestDist then
                    closestDist = dist
                    closest = pl
                end
            end
        end
    end
    return closest
end

local function getClosestNPC(lpHRP)
    if not lpHRP then return nil end

    local enemiesFolder = workspace:FindFirstChild("Enemies")
    if not enemiesFolder then return nil end

    local closest = nil
    local closestDist = math.huge
    for _, npc in ipairs(enemiesFolder:GetChildren()) do
        if npc:IsA("Model") then
            local hum = npc:FindFirstChildWhichIsA("Humanoid")
            local hrp = getHRP(npc)
            if hum and hum.Health > 0 and hrp then
                local dist = (hrp.Position - lpHRP.Position).Magnitude
                if dist <= maxRange and dist < closestDist then
                    closestDist = dist
                    closest = npc
                end
            end
        end
    end
    return closest
end

local function applyHighlight(targetModel, targetType)
    if not targetModel then return end
    if currentHighlight and currentHighlight.Adornee == targetModel then return end

    if currentHighlight then
        currentHighlight:Destroy()
        currentHighlight = nil
        currentTargetType = nil
    end

    local hl = Instance.new("Highlight")
    hl.FillColor = Color3.fromRGB(255, 255, 0)
    hl.OutlineColor = Color3.fromRGB(255, 255, 0)
    hl.FillTransparency = 0.5
    hl.OutlineTransparency = 0
    hl.Adornee = targetModel
    hl.Parent = workspace -- safe parent
    currentHighlight = hl
    currentTargetType = targetType

    -- keep existing behaviour
    pcall(function() VSkillModule:CheckVSkillUsage(SilentAimModule) end)
end

local function clearHighlight()
    if currentHighlight then
        currentHighlight:Destroy()
        currentHighlight = nil
        currentTargetType = nil
    end
end

-- Heartbeat: evaluate current targets
RunService.Heartbeat:Connect(function()
    if not player then
        player = Players.LocalPlayer
        if player then
            character = player.Character or player.CharacterAdded:Wait()
        else
            return
        end
    end

    local lpChar = player.Character
    if not lpChar then return end
    local lpHRP = lpChar:FindFirstChild("HumanoidRootPart")
    if not lpHRP then return end

    local targetModel = nil

    if SilentAimPlayersEnabled then
        local targetPlayer = selectedPlayer or getClosestPlayer(lpHRP)
        if targetPlayer and targetPlayer ~= player and targetPlayer.Character then
            playersAimbot = targetPlayer.Name
            local hrp = getHRP(targetPlayer.Character)
            playersPosition = getPredictedPosition(hrp)
            targetModel = targetPlayer.Character
            applyHighlight(targetModel, "player")
        else
            playersAimbot, playersPosition = nil, nil
        end
    elseif currentTargetType == "player" then
        playersAimbot, playersPosition = nil, nil
        clearHighlight()
    end

    if SilentAimNPCsEnabled then
        local closestNPC = getClosestNPC(lpHRP)
        if closestNPC then
            npcAimbot = closestNPC.Name
            local hrp = getHRP(closestNPC)
            npcPosition = getPredictedPosition(hrp)
            if not targetModel then
                targetModel = closestNPC
                applyHighlight(targetModel, "NPC")
            end
        else
            npcAimbot, npcPosition = nil, nil
        end
    elseif currentTargetType == "NPC" then
        npcAimbot, npcPosition = nil, nil
        clearHighlight()
    end
end)

-- Namecall hook (only if metatable is available)
spawn(function()
    local success, gg = pcall(function() return getrawmetatable(game) end)
    if not success or not gg then return end
    local old = gg.__namecall
    if not old then return end

    setreadonly(gg, false)
    gg.__namecall = newcclosure(function(...)
        local method = getnamecallmethod()
        local args = {...}

        local targetPos = nil
        if SilentAimPlayersEnabled and playersPosition then
            targetPos = playersPosition
        elseif SilentAimNPCsEnabled and npcPosition then
            targetPos = npcPosition
        end

        if targetPos and tostring(method) == "FireServer" then
            if tostring(args[1]) == "RemoteEvent" then
                if tostring(args[2]) ~= "true" and tostring(args[2]) ~= "false" then
                    if typeof(args[2]) == "Vector3" then
                        args[2] = targetPos
                    else
                        args[2] = CFrame.new(targetPos)
                    end
                    return old(unpack(args))
                end
            end
        end
        return old(...)
    end)
    setreadonly(gg, true)
end)

-- Mouse module handling (if present)
local mouseModuleInstance = ReplicatedStorage:FindFirstChild("Mouse")
if mouseModuleInstance and typeof(mouseModuleInstance) == "Instance" then
    local ok2, Mouse = pcall(function() return require(mouseModuleInstance) end)
    if ok2 and Mouse then
        local RootPart = character and character:FindFirstChild("HumanoidRootPart")
        if RootPart then
            pcall(function()
                Mouse.Hit = CFrame.new(RootPart.Position)
                Mouse.Target = RootPart
            end)
        else
            task.spawn(function()
                local rp = character and character:WaitForChild("HumanoidRootPart")
                pcall(function()
                    Mouse.Hit = CFrame.new(rp.Position)
                    Mouse.Target = rp
                end)
            end)
        end

        RunService.Heartbeat:Connect(function()
            if Mouse then
                if npcPosition then
                    pcall(function() Mouse.Hit = CFrame.new(npcPosition) end)
                elseif playersPosition then
                    pcall(function() Mouse.Hit = CFrame.new(playersPosition) end)
                end
            end
        end)
    end
end

local function hasTag(tagName)
    local char = player and player.Character
    if not char then return false end
    return CollectionService:HasTag(char, tagName)
end

task.spawn(function()
    while true do
        local char = player and (player.Character or player.CharacterAdded:Wait())
        char:WaitForChild("Humanoid")
        char:WaitForChild("HumanoidRootPart")
        task.wait(0.1)
        if AutoKen then
            if hasTag("Ken") then
                local playerGui = player and player:FindFirstChild("PlayerGui")
                if playerGui then
                    local kenButton = playerGui:FindFirstChild("MobileContextButtons")
                        and playerGui.MobileContextButtons:FindFirstChild("ContextButtonFrame")
                        and playerGui.MobileContextButtons.ContextButtonFrame:FindFirstChild("BoundActionKen")

                    if kenButton and kenButton:GetAttribute("Selected") ~= true then
                        kenButton:SetAttribute("Selected", true)
                    end
                end

                local observationManager = getrenv()._G.OM
                if (observationManager and not observationManager.active) then
                    observationManager.radius = 0
                    observationManager:setActive(true)
                    if commE then
                        pcall(function() commE:FireServer("Ken", true) end)
                    end
                end
            end
            task.wait()
        end
    end
end)

-- API functions (matching names used by your UI)
function SilentAimModule:SetAutoKen(state) AutoKen = state end

function SilentAimModule:SetPlayerSilentAim(state)
    UserWantsPlayerAim = state
    SilentAimPlayersEnabled = state
end

function SilentAimModule:SetNPCSilentAim(state)
    UserWantsNPCAim = state
    SilentAimNPCsEnabled = state
end

function SilentAimModule:Pause()
    SilentAimPlayersEnabled = false
    SilentAimNPCsEnabled = false
end

function SilentAimModule:Restore()
    SilentAimPlayersEnabled = UserWantsPlayerAim
    SilentAimNPCsEnabled = UserWantsNPCAim
end

function SilentAimModule:IsPlayerAimEnabled()
    return SilentAimPlayersEnabled
end

function SilentAimModule:IsNPCAimEnabled()
    return SilentAimNPCsEnabled
end

function SilentAimModule:SetDistanceLimit(num)
    if typeof(num) == "number" then maxRange = num end
end

function SilentAimModule:SetPrediction(state)
    PredictionEnabled = state
end

function SilentAimModule:SetPredictionAmount(num)
    if typeof(num) == "number" then predictionAmount = num end
end

-- Accept both capitalizations to avoid mismatches with other scripts
function SilentAimModule:SetSelectedPlayer(playerName)
    if not playerName or playerName == "" then
        selectedPlayer = nil
        return
    end

    local found = Players:FindFirstChild(playerName)
    if found then selectedPlayer = found end
end
function SilentAimModule:SetSelectedplayer(playerName) -- alias
    return SilentAimModule:SetSelectedPlayer(playerName)
end

function SilentAimModule:GetSelectedPlayer()
    return selectedPlayer and selectedPlayer.Name or "None"
end
function SilentAimModule:GetSelectedplayer() -- alias
    return SilentAimModule:GetSelectedPlayer()
end

return SilentAimModule
