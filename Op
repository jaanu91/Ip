local SilentAimModule = {}

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local CollectionService = game:GetService("CollectionService")
local player = Players.LocalPlayer or Players.PlayerAdded:Wait()

local function getLocalChar()
	return player.Character or player.CharacterAdded:Wait()
end

local lpChar = getLocalChar()

local SilentAimPlayersEnabled = false
local SilentAimNPCsEnabled = false
local Skill = false
local botTap = true
local Skills = {"Z", "X", "C", "V", "F"}

local playersaimbot = nil
local PlayersPosition = nil
local NPCaimbot = nil
local NPCPosition = nil
local currentHighlight = nil
local currentTargetType = nil
local Selectedplayer = nil
local Goat = nil

local PredictionAmount = 0.1
local maxRange = 1000

-- -----------------------
-- Utility functions
-- -----------------------
local function getHRP(model)
	if not model then return nil end
	return model:FindFirstChild("HumanoidRootPart")
end

local function getPredictedPosition(hrp)
	if not hrp then return nil end
	return hrp.Position + (hrp.Velocity * PredictionAmount)
end

local function getClosestPlayer(lpHRP)
	local closest, closestDist = nil, math.huge
	for _, plr in ipairs(Players:GetPlayers()) do
		if plr ~= player and plr.Character then
			local hrp = getHRP(plr.Character)
			local hum = plr.Character:FindFirstChildWhichIsA("Humanoid")
			if hrp and hum and hum.Health > 0 then
				local dist = (hrp.Position - lpHRP.Position).Magnitude
				if dist < closestDist and dist <= maxRange then
					closest = plr
					closestDist = dist
				end
			end
		end
	end
	return closest
end

local function getClosestNPC(lpHRP)
	local enemiesFolder = Workspace:FindFirstChild("Enemies")
	if not enemiesFolder then return nil end
	local closest, closestDist = nil, math.huge
	for _, npc in ipairs(enemiesFolder:GetChildren()) do
		if npc:IsA("Model") then
			local hrp = getHRP(npc)
			local hum = npc:FindFirstChildWhichIsA("Humanoid")
			if hrp and hum and hum.Health > 0 then
				local dist = (hrp.Position - lpHRP.Position).Magnitude
				if dist < closestDist and dist <= maxRange then
					closest = npc
					closestDist = dist
				end
			end
		end
	end
	return closest
end

local function applyHighlight(targetModel, targetType)
	if currentHighlight and currentHighlight.Adornee == targetModel then return end
	if currentHighlight then
		currentHighlight:Destroy()
		currentHighlight = nil
	end
	local hl = Instance.new("Highlight")
	hl.FillColor = (targetType == "Player") and Color3.fromRGB(255, 255, 0) or Color3.fromRGB(0, 255, 255)
	hl.OutlineColor = Color3.fromRGB(255, 255, 255)
	hl.FillTransparency = 0.5
	hl.Adornee = targetModel
	hl.Parent = targetModel
	currentHighlight = hl
	currentTargetType = targetType
end

local function clearHighlight()
	if currentHighlight then
		currentHighlight:Destroy()
		currentHighlight = nil
		currentTargetType = nil
	end
end

RunService.Heartbeat:Connect(function()
	lpChar = player.Character
	if not lpChar then return end
	local lpHRP = lpChar:FindFirstChild("HumanoidRootPart")
	if not lpHRP then return end

	local targetModel = nil

	if SilentAimPlayersEnabled then
		local closestPlayer = getClosestPlayer(lpHRP)
		if closestPlayer and closestPlayer.Character then
			local hrp = getHRP(closestPlayer.Character)
			if hrp then
				playersaimbot = closestPlayer.Name
				PlayersPosition = getPredictedPosition(hrp)
				targetModel = closestPlayer.Character
				applyHighlight(targetModel, "Player")
			end
		else
			playersaimbot, PlayersPosition = nil, nil
			clearHighlight()
		end
	elseif currentTargetType == "Player" then
		clearHighlight()
	end

	if SilentAimNPCsEnabled then
		local closestNPC = getClosestNPC(lpHRP)
		if closestNPC then
			local hrp = getHRP(closestNPC)
			if hrp then
				NPCaimbot = closestNPC.Name
				NPCPosition = getPredictedPosition(hrp)
				if not targetModel then
					targetModel = closestNPC
					applyHighlight(targetModel, "NPC")
				end
			end
		else
			NPCaimbot, NPCPosition = nil, nil
			clearHighlight()
		end
	elseif currentTargetType == "NPC" then
		clearHighlight()
	end
end)

do
    local MouseModule = ReplicatedStorage:FindFirstChild("Mouse")

    local ok, hookMeta = pcall(getrawmetatable, game)
    if ok and hookMeta then
        setreadonly(hookMeta, false)
        local OldHook
        OldHook = hookmetamethod(game, "__namecall", function(self, V1, V2, ...)
            local Method = (getnamecallmethod and getnamecallmethod():lower()) or ""
            if tostring(self) == "RemoteEvent" and Method == "fireserver" then
                if typeof(V1) == "Vector3" then
                    if Goat and Skill then
                        local part = Goat[1]
                        local pos = (part and part.Position) or Goat[2]
                        return OldHook(self, pos or V1, V2, ...)
                    end

                    if SilentAimPlayersEnabled and PlayersPosition then
                        return OldHook(self, PlayersPosition, V2, ...)
                    end

                    if SilentAimNPCsEnabled and NPCPosition then
                        return OldHook(self, NPCPosition, V2, ...)
                    end
                end
            elseif Method == "invokeserver" then
                if type(V1) == "string" then
                    if V1 == "TAP" and typeof(V2) == "Vector3" then
                        if botTap and PlayersPosition then
                            return OldHook(self, "TAP", PlayersPosition, ...)
                        elseif botTap and NPCPosition then
                            return OldHook(self, "TAP", NPCPosition, ...)
                        end
                    else
                        local Enemie = ...
                        if table.find(Skills, V1) and typeof(V2) == "Vector3" and not Enemie then
                            if Goat and Skill then
                                local part = Goat[1]
                                local pos = (part and part.Position) or Goat[2]
                                return OldHook(self, V1, pos or V2, V2, ...)
                            end

                            if SilentAimPlayersEnabled and PlayersPosition then
                                return OldHook(self, V1, PlayersPosition, nil, ...)
                            elseif SilentAimNPCsEnabled and NPCPosition then
                                return OldHook(self, V1, NPCPosition, nil, ...)
                            end
                        end
                    end
                end
            end

            return OldHook(self, V1, V2, ...)
        end)
        setreadonly(hookMeta, true)
    end

    if MouseModule and typeof(MouseModule) == "Instance" then
        local ok2, Mouse = pcall(function() return require(MouseModule) end)
        if ok2 and Mouse then
            local Character = player.Character or player.CharacterAdded:Wait()
            local RootPart = Character and Character:FindFirstChild("HumanoidRootPart")
            if RootPart then
                pcall(function()
                    Mouse.Hit = CFrame.new(RootPart.Position)
                    Mouse.Target = RootPart
                end)
            else
                task.spawn(function()
                    local Character = player.Character or player.CharacterAdded:Wait()
                    local RootPart = Character:WaitForChild("HumanoidRootPart")
                    pcall(function()
                        Mouse.Hit = CFrame.new(RootPart.Position)
                        Mouse.Target = RootPart
                    end)
                end)
            end

            RunService.Heartbeat:Connect(function()
                if Mouse then
                    if NPCPosition then
                        pcall(function() Mouse.Hit = CFrame.new(NPCPosition) end)
                    elseif PlayersPosition then
	                    pcall(function() Mouse.Hit = CFrame.new(PlayersPosition) end)
                    end
                end
            end)
        end
    end
end

function SilentAimModule:SetplayerSilentAim(state)
	SilentAimplayersEnabled = state
end

function SilentAimModule:SetNPCSilentAim(state)
	SilentAimNPCsEnabled = state
end

return SilentAimModule
