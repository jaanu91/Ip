local SilentAimModule = {}

Playersaimbot = nil
PlayersPosition = nil
NPCaimbot = nil
NPCPosition = nil

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local camera = workspace.CurrentCamera

local SilentAimPlayersEnabled = false
local SilentAimNPCsEnabled = false
local PredictionEnabled = false
local savedSilentPlayers = false
local savedSilentNPCs = false

local PredictionAmount = 0.1
local maxRange = 1000

local function disableSilentAimTemp()
    if SilentAimPlayersEnabled or SilentAimNPCsEnabled then
        savedSilentPlayers = SilentAimPlayersEnabled
        savedSilentNPCs = SilentAimNPCsEnabled
        SilentAimModule:SetPlayerSilentAim(false)
        SilentAimModule:SetNPCSilentAim(false)
    end
end

local function restoreSilentAim()
    SilentAimModule:SetPlayerSilentAim(savedSilentPlayers)
    SilentAimModule:SetNPCSilentAim(savedSilentNPCs)
    savedSilentPlayers, savedSilentNPCs = false, false
end

local function getHRP(model)
    if not model or not model:FindFirstChild("HumanoidRootPart") then return nil end
    return model.HumanoidRootPart
end

local function getPredictedPosition(hrp)
    if not hrp then return nil end
    if not PredictionEnabled then
        return hrp.Position
    end

    local velocity = hrp.Velocity
    return hrp.Position + (velocity * PredictionAmount)
end

local function getClosestPlayer(lpHRP)
    local closest = nil
    local closestDist = math.huge
    for _, pl in ipairs(Players:GetPlayers()) do
        if pl ~= player and pl.Character and pl.Character.Parent ~= nil then
            local hrp = getHRP(pl.Character)
            if hrp then
                local dist = (hrp.Position - lpHRP.Position).Magnitude
                if dist <= maxRange and dist < closestDist then
                    closestDist = dist
                    closest = pl
                end
            end
        end
    end
    return closest
end

local function getClosestNPC(lpHRP)
    local enemiesFolder = workspace:FindFirstChild("Enemies")
    if not enemiesFolder then return nil end

    local closest = nil
    local closestDist = math.huge
    for _, npc in ipairs(enemiesFolder:GetChildren()) do
        if npc:IsA("Model") and npc:FindFirstChild("Humanoid") then
            local hrp = getHRP(npc)
            if hrp then
                local dist = (hrp.Position - lpHRP.Position).Magnitude
                if dist <= maxRange and dist < closestDist then
                    closestDist = dist
                    closest = npc
                end
            end
        end
    end
    return closest
end

local function watchDamageCounter()
    if dmgConn then
        pcall(function() dmgConn:Disconnect() end)
        dmgConn = nil
    end

    local ok, dmgTextLabel = pcall(function()
        return player:WaitForChild("PlayerGui"):WaitForChild("Main"):WaitForChild("DmgCounter"):WaitForChild("Text")
    end)
    if not ok or not dmgTextLabel then return end

    dmgConn = dmgTextLabel:GetPropertyChangedSignal("Text"):Connect(function()
        local dmgText = tonumber(dmgTextLabel.Text) or 0
        if dmgText > 0 and currentHighlight then
            if next(rightTouches) and (sharkZActive or cursedZActive or vActive) then
                disableSilentAimTemp()
            end
        end
    end)
end

UserInputService.TouchStarted:Connect(function(touch)
    if touch.Position.X > camera.ViewportSize.X / 2 then
        rightTouches[touch] = true
    end
end)

UserInputService.TouchEnded:Connect(function(touch)
    if rightTouches[touch] then
        rightTouches[touch] = nil
        if not next(rightTouches) then
            vActive = false
            sharkZActive = false
            cursedZActive = false
            restoreSilentAim()
        end
    end
end)

local old
old = hookmetamethod(game, "__namecall", function(self, ...)
    local method = getnamecallmethod()
    local args = {...}

    if (method == "InvokeServer" or method == "FireServer") then
        local a1 = args[1]

        if typeof(a1) == "string" and a1:upper() == "V" then
            if currentTool and currentTool.Name == "Dough-Dough" then
                vActive = true
                local stamp = os.clock()
                task.delay(2, function()
                    if os.clock() - stamp >= 2 then
                        vActive = false
                        restoreSilentAim()
                    end
                end)
            end
        end

        if typeof(a1) == "string" and a1:upper() == "Z" then
            if currentTool and currentTool.Name == "Shark Anchor" then
                sharkZActive = true
                local stamp = os.clock()
                task.delay(2, function()
                    if os.clock() - stamp >= 2 then
                        sharkZActive = false
                        restoreSilentAim()
                    end
                end)
            elseif currentTool and currentTool.Name == "Cursed Dual Katana" then
                cursedZActive = true
                local stamp = os.clock()
                task.delay(2, function()
                    if os.clock() - stamp >= 2 then
                        cursedZActive = false
                        restoreSilentAim()
                    end
                end)
            end
        end

        if currentTool and currentTool.Name == "Shark Anchor" and self.Name == "EquipEvent" then
            if args[1] == false then
                currentTool = nil
                sharkZActive = false
                restoreSilentAim()
            end
        end
    end
    return old(self, ...)
end)

RunService.Heartbeat:Connect(function()
    local lpChar = player.Character
    if not lpChar then return end
    local lpHRP = lpChar:FindFirstChild("HumanoidRootPart")
    if not lpHRP then return end

    if SilentAimPlayersEnabled then
        local closestPl = getClosestPlayer(lpHRP)
        if closestPl then
            Playersaimbot = closestPl.Name
            local hrp = getHRP(closestPl.Character)
            PlayersPosition = getPredictedPosition(hrp)
        else
            Playersaimbot, PlayersPosition = nil, nil
        end
    else
        Playersaimbot, PlayersPosition = nil, nil
    end

    if SilentAimNPCsEnabled then
        local closestNPC = getClosestNPC(lpHRP)
        if closestNPC then
            NPCaimbot = closestNPC.Name
            local hrp = getHRP(closestNPC)
            NPCPosition = getPredictedPosition(hrp)
        else
            NPCaimbot, NPCPosition = nil, nil
        end
    else
        NPCaimbot, NPCPosition = nil, nil
    end
end)

spawn(function()
    local success, gg = pcall(function() return getrawmetatable(game) end)
    if not success or not gg then return end
    local old = gg.__namecall
    if not old then return end

    setreadonly(gg, false)
    gg.__namecall = newcclosure(function(...)
        local method = getnamecallmethod()
        local args = {...}

        local targetPos = nil
        if SilentAimPlayersEnabled and PlayersPosition then
            targetPos = PlayersPosition
        elseif SilentAimNPCsEnabled and NPCPosition then
            targetPos = NPCPosition
        end

        if targetPos and tostring(method) == "FireServer" then
            if tostring(args[1]) == "RemoteEvent" then
                if tostring(args[2]) ~= "true" and tostring(args[2]) ~= "false" then
                    args[2] = targetPos
                    return old(unpack(args))
                end
            end
        end
        return old(...)
    end)
    setreadonly(gg, true)
end)

function SilentAimModule:SetPlayerSilentAim(state)
    SilentAimPlayersEnabled = state
end

function SilentAimModule:SetNPCSilentAim(state)
    SilentAimNPCsEnabled = state
end

function SilentAimModule:SetDistanceLimit(num)
    if typeof(num) == "number" then
        maxRange = num
    end
end

function SilentAimModule:SetPrediction(state)
    PredictionEnabled = state
end

function SilentAimModule:SetPredictionAmount(num)
    if typeof(num) == "number" then
        PredictionAmount = num
    end
end

return SilentAimModule
