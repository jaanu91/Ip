local SilentAimModule = {}

Playersaimbot = nil
PlayersPosition = nil
NPCaimbot = nil
NPCPosition = nil

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local RunService = game:GetService("RunService")
local cam = workspace.CurrentCamera

local SilentAimPlayersEnabled = false
local SilentAimNPCsEnabled = false
local PredictionEnabled = false

local PredictionAmount = 0.1
local maxRange = 1000

-- Helpers
local function getHRP(model)
    return model and model:FindFirstChild("HumanoidRootPart") or nil
end

local function getPredictedPosition(hrp)
    if not hrp then return nil end
    if not PredictionEnabled then
        return hrp.Position
    end
    return hrp.Position + (hrp.Velocity * PredictionAmount)
end

local function aimlockAt(targetPos, duration)
    if not targetPos then return end
    local oldCF = cam.CFrame
    cam.CFrame = CFrame.new(cam.CFrame.Position, targetPos)
    task.delay(duration or 1, function()
        cam.CFrame = oldCF
    end)
end

local function getClosestPlayer(lpHRP)
    local closest, dist = nil, math.huge
    for _, pl in ipairs(Players:GetPlayers()) do
        if pl ~= player and pl.Character and pl.Character.Parent ~= nil then
            local hrp = getHRP(pl.Character)
            if hrp then
                local d = (hrp.Position - lpHRP.Position).Magnitude
                if d <= maxRange and d < dist then
                    dist = d
                    closest = pl
                end
            end
        end
    end
    return closest
end

local function getClosestNPC(lpHRP)
    local enemies = workspace:FindFirstChild("Enemies")
    if not enemies then return nil end

    local closest, dist = nil, math.huge
    for _, npc in ipairs(enemies:GetChildren()) do
        if npc:IsA("Model") and npc:FindFirstChild("Humanoid") then
            local hrp = getHRP(npc)
            if hrp then
                local d = (hrp.Position - lpHRP.Position).Magnitude
                if d <= maxRange and d < dist then
                    dist = d
                    closest = npc
                end
            end
        end
    end
    return closest
end

-- Update silent aim target
RunService.Heartbeat:Connect(function()
    local lpChar = player.Character
    if not lpChar then return end
    local lpHRP = lpChar:FindFirstChild("HumanoidRootPart")
    if not lpHRP then return end

    if SilentAimPlayersEnabled then
        local closestPl = getClosestPlayer(lpHRP)
        if closestPl then
            Playersaimbot = closestPl.Name
            PlayersPosition = getPredictedPosition(getHRP(closestPl.Character))
        else
            Playersaimbot, PlayersPosition = nil, nil
        end
    else
        Playersaimbot, PlayersPosition = nil, nil
    end

    if SilentAimNPCsEnabled then
        local closestNPC = getClosestNPC(lpHRP)
        if closestNPC then
            NPCaimbot = closestNPC.Name
            NPCPosition = getPredictedPosition(getHRP(closestNPC))
        else
            NPCaimbot, NPCPosition = nil, nil
        end
    else
        NPCaimbot, NPCPosition = nil, nil
    end
end)

-- Unified hook for FireServer + InvokeServer
local mt = getrawmetatable(game)
setreadonly(mt, false)
local old = mt.__namecall

mt.__namecall = newcclosure(function(self, ...)
    local args = {...}
    local method = getnamecallmethod()

    local targetPos = PlayersPosition or NPCPosition

    -- Silent Aim (FireServer hook)
    if method == "FireServer" and targetPos then
        if tostring(args[1]) == "RemoteEvent" then
            if tostring(args[2]) ~= "true" and tostring(args[2]) ~= "false" then
                args[2] = targetPos
                return old(self, unpack(args))
            end
        end
    end

    -- Godhuman Z Skill Camera Aimlock
    if method == "InvokeServer" and args[1] == "Z" then
        if targetPos then
            aimlockAt(targetPos, 1) -- Aimlock for 1 sec
        end
    end

    return old(self, ...)
end)
setreadonly(mt, true)

-- API
function SilentAimModule:SetPlayerSilentAim(state) SilentAimPlayersEnabled = state end
function SilentAimModule:SetNPCSilentAim(state) SilentAimNPCsEnabled = state end
function SilentAimModule:SetDistanceLimit(num) if typeof(num) == "number" then maxRange = num end end
function SilentAimModule:SetPrediction(state) PredictionEnabled = state end
function SilentAimModule:SetPredictionAmount(num) if typeof(num) == "number" then PredictionAmount = num end end

return SilentAimModule
