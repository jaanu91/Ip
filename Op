local SilentAimModule = {}

Playersaimbot = nil
PlayersPosition = nil
NPCaimbot = nil
NPCPosition = nil

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local RunService = game:GetService("RunService")
local camera = workspace.CurrentCamera

local SilentAimPlayersEnabled = false
local SilentAimNPCsEnabled = false
local PredictionEnabled = false

local PredictionAmount = 0.1
local maxRange = 1000

-- Highlight
local currentHighlight = nil
local function applyHighlight(targetModel)
	if not targetModel then return end
	if currentHighlight and currentHighlight.Adornee == targetModel then return end

	-- remove old
	if currentHighlight then
		currentHighlight:Destroy()
		currentHighlight = nil
	end

	-- add new
	local hl = Instance.new("Highlight")
	hl.FillColor = Color3.fromRGB(255, 255, 0)
	hl.OutlineColor = Color3.fromRGB(255, 255, 0)
	hl.FillTransparency = 0.5
	hl.OutlineTransparency = 0
	hl.Adornee = targetModel
	hl.Parent = targetModel
	currentHighlight = hl
end

local function clearHighlight()
	if currentHighlight then
		currentHighlight:Destroy()
		currentHighlight = nil
	end
end

local function getHRP(model)
	if not model or not model:FindFirstChild("HumanoidRootPart") then return nil end
	return model.HumanoidRootPart
end

local function getPredictedPosition(hrp)
	if not hrp then return nil end
	if not PredictionEnabled then
		return hrp.Position
	end
	return hrp.Position + (hrp.Velocity * PredictionAmount)
end

local function getClosestPlayer(lpHRP)
	local closest = nil
	local closestDist = math.huge
	for _, pl in ipairs(Players:GetPlayers()) do
		if pl ~= player and pl.Character and pl.Character.Parent ~= nil then
			local hum = pl.Character:FindFirstChildOfClass("Humanoid")
			local hrp = getHRP(pl.Character)
			if hum and hum.Health > 0 and hrp then
				local dist = (hrp.Position - lpHRP.Position).Magnitude
				if dist <= maxRange and dist < closestDist then
					closestDist = dist
					closest = pl
				end
			end
		end
	end
	return closest
end

local function getClosestNPC(lpHRP)
	local enemiesFolder = workspace:FindFirstChild("Enemies")
	if not enemiesFolder then return nil end

	local closest = nil
	local closestDist = math.huge
	for _, npc in ipairs(enemiesFolder:GetChildren()) do
		if npc:IsA("Model") and npc:FindFirstChild("Humanoid") then
			local hum = npc:FindFirstChild("Humanoid")
			local hrp = getHRP(npc)
			if hum and hum.Health > 0 and hrp then
				local dist = (hrp.Position - lpHRP.Position).Magnitude
				if dist <= maxRange and dist < closestDist then
					closestDist = dist
					closest = npc
				end
			end
		end
	end
	return closest
end

RunService.Heartbeat:Connect(function()
	local lpChar = player.Character
	if not lpChar then return end
	local lpHRP = lpChar:FindFirstChild("HumanoidRootPart")
	if not lpHRP then return end

	local targetModel = nil

	if SilentAimPlayersEnabled then
		local closestPl = getClosestPlayer(lpHRP)
		if closestPl then
			Playersaimbot = closestPl.Name
			local hrp = getHRP(closestPl.Character)
			PlayersPosition = getPredictedPosition(hrp)
			targetModel = closestPl.Character
		else
			Playersaimbot, PlayersPosition = nil, nil
		end
	else
		Playersaimbot, PlayersPosition = nil, nil
	end

	if SilentAimNPCsEnabled and not targetModel then
		local closestNPC = getClosestNPC(lpHRP)
		if closestNPC then
			NPCaimbot = closestNPC.Name
			local hrp = getHRP(closestNPC)
			NPCPosition = getPredictedPosition(hrp)
			targetModel = closestNPC
		else
			NPCaimbot, NPCPosition = nil, nil
		end
	else
		NPCaimbot, NPCPosition = nil, nil
	end

	-- Handle highlight
	if SilentAimPlayersEnabled or SilentAimNPCsEnabled then
		if targetModel then
			applyHighlight(targetModel)
		else
			clearHighlight()
		end
	else
		clearHighlight()
	end
end)

-- Hook
spawn(function()
	local success, gg = pcall(function() return getrawmetatable(game) end)
	if not success or not gg then return end
	local old = gg.__namecall
	if not old then return end

	setreadonly(gg, false)
	gg.__namecall = newcclosure(function(...)
		local method = getnamecallmethod()
		local args = {...}

		local targetPos = nil
		if SilentAimPlayersEnabled and PlayersPosition then
			targetPos = PlayersPosition
		elseif SilentAimNPCsEnabled and NPCPosition then
			targetPos = NPCPosition
		end

		if targetPos and tostring(method) == "FireServer" then
			if tostring(args[1]) == "RemoteEvent" then
				if tostring(args[2]) ~= "true" and tostring(args[2]) ~= "false" then
					args[2] = targetPos
					return old(unpack(args))
				end
			end
		end
		return old(...)
	end)
	setreadonly(gg, true)
end)

-- API
function SilentAimModule:SetPlayerSilentAim(state)
	SilentAimPlayersEnabled = state
end

function SilentAimModule:SetNPCSilentAim(state)
	SilentAimNPCsEnabled = state
end

function SilentAimModule:SetDistanceLimit(num)
	if typeof(num) == "number" then
		maxRange = num
	end
end

function SilentAimModule:SetPrediction(state)
	PredictionEnabled = state
end

function SilentAimModule:SetPredictionAmount(num)
	if typeof(num) == "number" then
		PredictionAmount = num
	end
end

return SilentAimModule
