local StuffsModule = {}

local PingsOrFpsEnabled = false
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local waterPart = workspace:FindFirstChild("Map") and workspace.Map:FindFirstChild("WaterBase-Plane")

local ScreenGui
local FpsPingLabel
local FpsBoostEnabled = false
local InfiniteEnergy = false
local FastAttackEnabled = false
local WalkWaterEnabled = false

local savedSettings = {}
local connections = {}

local function createGui()
	if ScreenGui then return end 

	ScreenGui = Instance.new("ScreenGui")
	ScreenGui.Name = "FpsPingGui"
	ScreenGui.ResetOnSpawn = false
	ScreenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

	FpsPingLabel = Instance.new("TextLabel")
	FpsPingLabel.Name = "FpsPingLabel"
	FpsPingLabel.Size = UDim2.new(0, 120, 0, 20) -- wider for both values
	FpsPingLabel.Position = UDim2.new(1, -10, 0, 10) -- top-right corner
	FpsPingLabel.AnchorPoint = Vector2.new(1, 0) 
	FpsPingLabel.BackgroundTransparency = 1
	FpsPingLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	FpsPingLabel.Font = Enum.Font.SourceSansBold
	FpsPingLabel.TextSize = 18
	FpsPingLabel.TextXAlignment = Enum.TextXAlignment.Right
	FpsPingLabel.RichText = true -- allow color tags
	FpsPingLabel.Parent = ScreenGui
end

local lastTime = tick()
local frameCount = 0
local fps = 0

RunService.RenderStepped:Connect(function(deltaTime)
	if not PingsOrFpsEnabled then
		if ScreenGui then
			ScreenGui.Enabled = false
		end
		return
	end

	createGui()
	ScreenGui.Enabled = true

	frameCount = frameCount + 1
	if tick() - lastTime >= 1 then
		fps = frameCount
		frameCount = 0
		lastTime = tick()
	end

	local ping = math.floor(LocalPlayer:GetNetworkPing() * 2000)

	local fpsColor
	if fps >= 50 then
		fpsColor = "00FF00" -- Green
	elseif fps >= 30 then
		fpsColor = "FFA500" -- Orange
	else
		fpsColor = "FF0000" -- Red
	end

	local pingColor
	if ping <= 80 then
		pingColor = "00FF00" -- Green
	elseif ping <= 150 then
		pingColor = "FFFF00" -- Yellow
	else
		pingColor = "FF0000" -- Red
	end

	FpsPingLabel.Text = string.format(
		'<font color="#%s">FPS: %d</font>  |  <font color="#%s">Ping: %dms</font>',
		fpsColor, fps, pingColor, ping
	)
end)

local function optimizeInstance(v)
	if v:IsA("Part") or v:IsA("MeshPart") then
		v.Material = Enum.Material.Plastic
		v.Reflectance = 0
	elseif v:IsA("Decal") or v:IsA("Texture") then
		v.Transparency = 1
	elseif v:IsA("ParticleEmitter") then
		v.Lifetime = NumberRange.new(0, 0)
	elseif v:IsA("Trail") then
		v.Lifetime = 0
	elseif v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke") or v:IsA("Sparkles") then
		v.Enabled = false
	end
end

local function optimizeUI(instance)
    if instance:IsA("ImageLabel") or instance:IsA("ImageButton") then
        instance.ImageTransparency = 0
        
    elseif instance:IsA("TextLabel") or instance:IsA("TextButton") then
        instance.RichText = false -- turn off rich text if not needed
        instance.TextStrokeTransparency = 1 -- disable stroke
        instance.TextSize = math.min(instance.TextSize, 14) -- reduce text size slightly
        instance.Font = Enum.Font.SourceSans -- simpler font uses less GPU
    end
end

local function applyFpsBoost()
	local g = game
	local w = g.Workspace
	local l = g.Lighting
	local t = w.Terrain

	if not savedSettings.Terrain then
		savedSettings.Terrain = {
			WaterWaveSize = t.WaterWaveSize,
			WaterWaveSpeed = t.WaterWaveSpeed,
			WaterReflectance = t.WaterReflectance,
			WaterTransparency = t.WaterTransparency,
		}
		savedSettings.Lighting = {
			GlobalShadows = l.GlobalShadows,
			FogEnd = l.FogEnd,
			Brightness = l.Brightness,
			EnvironmentSpecularScale =  l.EnvironmentSpecularScale,
			EnvironmentDiffuseScale =  l.EnvironmentDiffuseScale,
		}
		savedSettings.QualityLevel = settings().Rendering.QualityLevel
	end

	t.WaterWaveSize = 0
	t.WaterWaveSpeed = 0
	t.WaterReflectance = 0
	t.WaterTransparency = 1
	l.GlobalShadows = false
	l.FogEnd = 9e9
	l.Brightness = 1
	l.EnvironmentSpecularScale = 0
	l.EnvironmentDiffuseScale = 0
	settings().Rendering.QualityLevel = Enum.QualityLevel.Level01

	for _, e in pairs(l:GetChildren()) do
		if e:IsA("BlurEffect") or e:IsA("SunRaysEffect") or e:IsA("ColorCorrectionEffect") 
		or e:IsA("BloomEffect") or e:IsA("DepthOfFieldEffect") then
			e.Enabled = false
		end
	end
	
	for _, v in pairs(Lighting:GetChildren()) do
	    if v:IsA("Sky") then
	        v:Destroy()
	    end
	end
	
	for _, v in pairs(Lighting:GetChildren()) do
	    if v:IsA("PostEffect") then
	        v.Enabled = false
	    end
	end
	
	for _, obj in pairs(workspace:GetDescendants()) do
	    if obj:IsA("Part") or obj:IsA("MeshPart") or obj:IsA("UnionOperation") then
	        obj.CastShadow = false
	    end
	end

	for _, v in pairs(g:GetDescendants()) do
		optimizeInstance(v)
	end
	
	for _, gui in pairs(LocalPlayer.PlayerGui:GetDescendants()) do
	    optimizeUI(gui)
	end
	
	if setfpscap then
		setfpscap(60)
	end

	table.insert(connections, g.DescendantAdded:Connect(optimizeInstance))
	table.insert(connections, LocalPlayer.PlayerGui.DescendantAdded:Connect(optimizeUI))
end

local function restoreGraphics()
	local g = game
	local w = g.Workspace
	local l = g.Lighting
	local t = w.Terrain

	for _, conn in ipairs(connections) do
		if conn.Connected then conn:Disconnect() end
	end
	connections = {}

	if savedSettings.Terrain then
		for k, v in pairs(savedSettings.Terrain) do
			t[k] = v
		end
	end
	if savedSettings.Lighting then
		for k, v in pairs(savedSettings.Lighting) do
			l[k] = v
		end
	end
	if savedSettings.QualityLevel then
		settings().Rendering.QualityLevel = savedSettings.QualityLevel
	end
end

local function infinitestam()
    local energy = LocalPlayer.Character:WaitForChild("Energy")
    energy.Changed:Connect(function()
        if InfiniteEnergy then
            energy.Value = energy.MaxValue or 100
        end
    end)
end

LocalPlayer.CharacterAdded:Connect(function()
    task.wait(1)
    infinitestam()
end)

if LocalPlayer.Character then
    infinitestam()
end

function Hop()
    local PlaceID = game.PlaceId
    local AllIDs = {}
    local foundAnything = ""
    local actualHour = os.date("!*t").hour
    local Deleted = false
    function TPReturner()
        local Site;
        if foundAnything == "" then
            Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
        else
            Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
        end
        local ID = ""
        if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
            foundAnything = Site.nextPageCursor
        end
        local num = 0;
        for i,v in pairs(Site.data) do
            local Possible = true
            ID = tostring(v.id)
            if tonumber(v.maxPlayers) > tonumber(v.playing) then
                for _,Existing in pairs(AllIDs) do
                    if num ~= 0 then
                        if ID == tostring(Existing) then
                            Possible = false
                        end
                    else
                        if tonumber(actualHour) ~= tonumber(Existing) then
                            local delFile = pcall(function()
                                -- delfile("NotSameServers.json")
                                AllIDs = {}
                                table.insert(AllIDs, actualHour)
                            end)
                        end
                    end
                    num = num + 1
                end
                if Possible == true then
                    table.insert(AllIDs, ID)
                    wait(.1)
                    pcall(function()
                        -- writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                        wait()
                        game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                    end)
                    wait(.1)
                end
            end
        end
    end
    function Teleport() 
        while wait(.1) do
            pcall(function()
                TPReturner()
                if foundAnything ~= "" then
                    TPReturner()
                end
            end)
        end
    end
    Teleport()
end

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local VirtualInputManager = game:GetService("VirtualInputManager")

local Player = Players.LocalPlayer
local Modules = ReplicatedStorage:WaitForChild("Modules")
local Net = Modules:WaitForChild("Net")
local RegisterAttack = Net:WaitForChild("RE/RegisterAttack")
local RegisterHit = Net:WaitForChild("RE/RegisterHit")
local ShootGunEvent = Net:WaitForChild("RE/ShootGunEvent")
local GunValidator = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Validator2")

local Config = {
    AttackDistance = 255,
    AttackMobs = true,
    AttackPlayers = true,
    AttackCooldown = 0.2,
    ComboResetTime = 0.3,
    MaxCombo = 4,
    HitboxLimbs = {"RightLowerArm", "RightUpperArm", "LeftLowerArm", "LeftUpperArm", "RightHand", "LeftHand"},
    AutoClickEnabled = true
}

local FastAttack = {}
FastAttack.__index = FastAttack

function FastAttack.new()
    local self = setmetatable({
        Debounce = 0,
        ComboDebounce = 0,
        ShootDebounce = 0,
        M1Combo = 0,
        EnemyRootPart = nil,
        Connections = {},
        Overheat = {Dragonstorm = {MaxOverheat = 3, Cooldown = 0, TotalOverheat = 0, Distance = 350, Shooting = false}},
        ShootsPerTarget = {["Dual Flintlock"] = 2},
        SpecialShoots = {["Skull Guitar"] = "TAP", ["Bazooka"] = "Position", ["Cannon"] = "Position", ["Dragonstorm"] = "Overheat"}
    }, FastAttack)
    
    pcall(function()
        self.CombatFlags = require(Modules.Flags).COMBAT_REMOTE_THREAD
        self.ShootFunction = getupvalue(require(ReplicatedStorage.Controllers.CombatController).Attack, 9)
        local LocalScript = Player:WaitForChild("PlayerScripts"):FindFirstChildOfClass("LocalScript")
        if LocalScript and getsenv then
            self.HitFunction = getsenv(LocalScript)._G.SendHitsToServer
        end
    end)
    
    return self
end

function FastAttack:IsEntityAlive(entity)
    local humanoid = entity and entity:FindFirstChild("Humanoid")
    return humanoid and humanoid.Health > 0
end

function FastAttack:CheckStun(Character, Humanoid, ToolTip)
    local Stun = Character:FindFirstChild("Stun")
    local Busy = Character:FindFirstChild("Busy")
    if Humanoid.Sit and (ToolTip == "Sword" or ToolTip == "Melee" or ToolTip == "Blox Fruit") then
        return false
    elseif Stun and Stun.Value > 0 or Busy and Busy.Value then
        return false
    end
    return true
end

function FastAttack:GetBladeHits(Character, Distance)
    local Position = Character:GetPivot().Position
    local BladeHits = {}
    Distance = Distance or Config.AttackDistance
    
    local function ProcessTargets(Folder, CanAttack)
        for _, Enemy in ipairs(Folder:GetChildren()) do
            if Enemy ~= Character and self:IsEntityAlive(Enemy) then
                local BasePart = Enemy:FindFirstChild(Config.HitboxLimbs[math.random(#Config.HitboxLimbs)]) or Enemy:FindFirstChild("HumanoidRootPart")
                if BasePart and (Position - BasePart.Position).Magnitude <= Distance then
                    if not self.EnemyRootPart then
                        self.EnemyRootPart = BasePart
                    else
                        table.insert(BladeHits, {Enemy, BasePart})
                    end
                end
            end
        end
    end
    
    if Config.AttackMobs then ProcessTargets(Workspace.Enemies) end
    if Config.AttackPlayers then ProcessTargets(Workspace.Characters, true) end
    
    return BladeHits
end

function FastAttack:GetClosestEnemy(Character, Distance)
    local BladeHits = self:GetBladeHits(Character, Distance)
    local Closest, MinDistance = nil, math.huge
    
    for _, Hit in ipairs(BladeHits) do
        local Magnitude = (Character:GetPivot().Position - Hit[2].Position).Magnitude
        if Magnitude < MinDistance then
            MinDistance = Magnitude
            Closest = Hit[2]
        end
    end
    return Closest
end

function FastAttack:GetCombo()
    local Combo = (tick() - self.ComboDebounce) <= Config.ComboResetTime and self.M1Combo or 0
    Combo = Combo >= Config.MaxCombo and 1 or Combo + 1
    self.ComboDebounce = tick()
    self.M1Combo = Combo
    return Combo
end

function FastAttack:ShootInTarget(TargetPosition)
    local Character = Player.Character
    if not self:IsEntityAlive(Character) then return end
    
    local Equipped = Character:FindFirstChildOfClass("Tool")
    if not Equipped or Equipped.ToolTip ~= "Gun" then return end
    
    local Cooldown = Equipped:FindFirstChild("Cooldown") and Equipped.Cooldown.Value or 0.3
    if (tick() - self.ShootDebounce) < Cooldown then return end
    
    local ShootType = self.SpecialShoots[Equipped.Name] or "Normal"
    if ShootType == "Position" or (ShootType == "TAP" and Equipped:FindFirstChild("RemoteEvent")) then
        Equipped:SetAttribute("LocalTotalShots", (Equipped:GetAttribute("LocalTotalShots") or 0) + 1)
        GunValidator:FireServer(self:GetValidator2())
        
        if ShootType == "TAP" then
            Equipped.RemoteEvent:FireServer("TAP", TargetPosition)
        else
            ShootGunEvent:FireServer(TargetPosition)
        end
        self.ShootDebounce = tick()
    else
        self.ShootDebounce = tick()
    end
end

function FastAttack:GetValidator2()
    local v1 = getupvalue(self.ShootFunction, 15)
    local v2 = getupvalue(self.ShootFunction, 13)
    local v3 = getupvalue(self.ShootFunction, 16)
    local v4 = getupvalue(self.ShootFunction, 17)
    local v5 = getupvalue(self.ShootFunction, 14)
    local v6 = getupvalue(self.ShootFunction, 12)
    local v7 = getupvalue(self.ShootFunction, 18)
    
    local v8 = v6 * v2
    local v9 = (v5 * v2 + v6 * v1) % v3
    v9 = (v9 * v3 + v8) % v4
    v5 = math.floor(v9 / v3)
    v6 = v9 - v5 * v3
    v7 = v7 + 1
    
    setupvalue(self.ShootFunction, 15, v1)
    setupvalue(self.ShootFunction, 13, v2)
    setupvalue(self.ShootFunction, 16, v3)
    setupvalue(self.ShootFunction, 17, v4)
    setupvalue(self.ShootFunction, 14, v5)
    setupvalue(self.ShootFunction, 12, v6)
    setupvalue(self.ShootFunction, 18, v7)
    
    return math.floor(v9 / v4 * 16777215), v7
end

function FastAttack:UseNormalClick(Character, Humanoid, Cooldown)
    self.EnemyRootPart = nil
    local BladeHits = self:GetBladeHits(Character)
    
    if self.EnemyRootPart then
        RegisterAttack:FireServer(Cooldown)
        if self.CombatFlags and self.HitFunction then
            self.HitFunction(self.EnemyRootPart, BladeHits)
        else
            RegisterHit:FireServer(self.EnemyRootPart, BladeHits)
        end
    end
end

function FastAttack:UseFruitM1(Character, Equipped, Combo)
    local range = Config.AttackDistance
    local Targets = self:GetBladeHits(Character, range)
    if not Targets[1] then return end

    local Direction = (Targets[1][2].Position - Character:GetPivot().Position).Unit
    Equipped.LeftClickRemote:FireServer(Direction, Combo)
end

function FastAttack:Attack()
    if not Config.AutoClickEnabled or (tick() - self.Debounce) < Config.AttackCooldown then return end
    local Character = Player.Character
    if not Character or not self:IsEntityAlive(Character) then return end
    
    local Humanoid = Character.Humanoid
    local Equipped = Character:FindFirstChildOfClass("Tool")
    if not Equipped then return end
    
    local ToolTip = Equipped.ToolTip
    if not table.find({"Melee", "Blox Fruit", "Sword", "Gun"}, ToolTip) then return end
    
    local Cooldown = Equipped:FindFirstChild("Cooldown") and Equipped.Cooldown.Value or Config.AttackCooldown
    if not self:CheckStun(Character, Humanoid, ToolTip) then return end
    
    local Combo = self:GetCombo()
    Cooldown = Cooldown + (Combo >= Config.MaxCombo and 0.05 or 0)
    self.Debounce = Combo >= Config.MaxCombo and ToolTip ~= "Gun" and (tick() + 0.05) or tick()
    
    if ToolTip == "Blox Fruit" and Equipped:FindFirstChild("LeftClickRemote") then
        self:UseFruitM1(Character, Equipped, Combo)
    elseif ToolTip == "Gun" then
        local Target = self:GetClosestEnemy(Character, 120)
        if Target then
            self:ShootInTarget(Target.Position)
        end
    else
        self:UseNormalClick(Character, Humanoid, Cooldown)
    end
end

local AttackInstance = FastAttack.new()
table.insert(AttackInstance.Connections, RunService.Stepped:Connect(function()
    if FastAttackEnabled then
        AttackInstance:Attack()
    end
end))

for _, v in pairs(getgc(true)) do
    if typeof(v) == "function" and iscclosure(v) then
        local name = debug.getinfo(v).name
        if name == "Attack" or name == "attack" or name == "RegisterHit" then
            hookfunction(v, function(...)
                if FastAttackEnabled then
                    AttackInstance:Attack()
                end
                return v(...)
            end)
        end
    end
end

function StuffsModule:SetFpsBoost(state)
    FpsBoostEnabled = state
    if state then
        applyFpsBoost()
    else
        restoreGraphics()
    end
end

function StuffsModule:SetINFEnergy(state)
    InfiniteEnergy = state
end

function StuffsModule:SetHopServer(state)
    Hop()
end

function StuffsModule:SetRejoinServer(state)
    game:GetService("TeleportService"):Teleport(game.PlaceId, game:GetService("Players").LocalPlayer)
end

function StuffsModule:SetFastAttack(state)
    FastAttackEnabled = state
end

function StuffsModule:SetWalkWater(state)
    WalkWaterEnabled = state
    if WalkWaterEnabled then
        waterPart.Size = Vector3.new(1000,110,1000)
    else
        waterPart.Size = Vector3.new(1000,80,1000)
    end
end

function StuffsModule:SetPingsOrFps(state)
	PingsOrFpsEnabled = state
	if ScreenGui then
		ScreenGui.Enabled = state
	end
end

return StuffsModule
