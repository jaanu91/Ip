local ZSkillModule = {}

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local currentTool = nil
local sanguineZActive, godhumanZActive = false, false
local dmgConn = nil
local characterConnections = {}
local rightTouchReleased = false
local aimlockActive = false
local aimRenderConn = nil
local aimTimeoutTask = nil
local nearestTarget = nil
local ZSkillsEnabled = false

-- ========= SAFE DISCONNECT =========
local function clearConnections()
	for _, conn in ipairs(characterConnections) do
		pcall(function() conn:Disconnect() end)
	end
	characterConnections = {}

	if dmgConn then
		pcall(function() dmgConn:Disconnect() end)
		dmgConn = nil
	end

	if aimRenderConn then
		pcall(function() aimRenderConn:Disconnect() end)
		aimRenderConn = nil
	end

	if aimTimeoutTask then
		pcall(function() task.cancel(aimTimeoutTask) end)
		aimTimeoutTask = nil
	end
end

-- ========= NEAREST TARGET FINDER =========
local function GetNearestTarget(maxDistance)
	local lp = player
	local char = lp and lp.Character
	if not char or not char:FindFirstChild("HumanoidRootPart") then return nil end

	local hrp = char.HumanoidRootPart
	local closest, closestDist = nil, maxDistance or 100

	for _, plr in ipairs(Players:GetPlayers()) do
		if plr ~= lp and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character:FindFirstChild("Humanoid") then
			local otherHRP = plr.Character.HumanoidRootPart
			local humanoid = plr.Character:FindFirstChild("Humanoid")
			if otherHRP and humanoid and humanoid.Health > 0 then
				local dist = (otherHRP.Position - hrp.Position).Magnitude
				if dist < closestDist then
					closest = plr.Character
					closestDist = dist
				end
			end
		end
	end

	return closest
end

-- ========= TOOL HOOK =========
local function hookTool(tool)
	if not tool then return end
	currentTool = tool

	table.insert(characterConnections, tool.AncestryChanged:Connect(function(_, parent)
		if not parent then
			currentTool = nil
			sanguineZActive, godhumanZActive = false, false
			rightTouchReleased = false
			aimlockActive = false
		end
	end))
end

-- ========= VALID SKILL CONDITION =========
local function isValidStopCondition()
	return (currentTool and currentTool.Name == "Sanguine Art" and sanguineZActive)
		or (currentTool and currentTool.Name == "Godhuman" and godhumanZActive)
end

-- ========= STOP AIMLOCK =========
local function stopAimlock(reason)
	if not aimlockActive then return end
	aimlockActive = false
	nearestTarget = nil
	sanguineZActive, godhumanZActive = false, false

	if aimRenderConn then
		pcall(function() aimRenderConn:Disconnect() end)
		aimRenderConn = nil
	end

	if aimTimeoutTask then
		pcall(function() task.cancel(aimTimeoutTask) end)
		aimTimeoutTask = nil
	end
end

-- ========= START AIMLOCK =========
local function startAimlock()
	if not ZSkillsEnabled then return end
	if aimlockActive then return end

	nearestTarget = GetNearestTarget(1000)
	if not nearestTarget then return end

	aimlockActive = true

	aimRenderConn = RunService.RenderStepped:Connect(function()
		if not ZSkillsEnabled then
			stopAimlock("ZSkills disabled mid-aim")
			return
		end

		if aimlockActive and nearestTarget and nearestTarget:FindFirstChild("HumanoidRootPart") then
			local cam = workspace.CurrentCamera
			if cam then
				cam.CFrame = CFrame.lookAt(cam.CFrame.Position, nearestTarget.HumanoidRootPart.Position)
			end
		else
			stopAimlock("Lost target or inactive")
		end
	end)

	aimTimeoutTask = task.delay(1, function()
		if aimlockActive then
			stopAimlock("1s timeout")
		end
	end)
end

-- ========= WATCH DAMAGE COUNTER =========
local function watchDamageCounter()
	if not ZSkillsEnabled then return end

	if dmgConn then
		pcall(function() dmgConn:Disconnect() end)
		dmgConn = nil
	end

	local gui = player:WaitForChild("PlayerGui"):WaitForChild("Main", 5)
	if not gui then return end

	local dmgCounter = gui:FindFirstChild("DmgCounter")
	if not dmgCounter then
		table.insert(characterConnections, gui.ChildAdded:Connect(function(child)
			if child.Name == "DmgCounter" then
				task.wait()
				watchDamageCounter()
			end
		end))
		return
	end

	local dmgTextLabel = dmgCounter:FindFirstChild("Text")
	if not dmgTextLabel then
		table.insert(characterConnections, dmgCounter.ChildAdded:Connect(function(child)
			if child.Name == "Text" then
				task.wait()
				watchDamageCounter()
			end
		end))
		return
	end

	dmgConn = dmgTextLabel:GetPropertyChangedSignal("Text"):Connect(function()
		if not ZSkillsEnabled then return end
		local dmgText = tonumber(dmgTextLabel.Text) or 0
		if dmgText > 0 and aimlockActive then
			stopAimlock("Damage detected")
		end
	end)
end

-- ========= TOUCH INPUT =========
UserInputService.TouchEnded:Connect(function(touch)
	if not ZSkillsEnabled then return end
	local camera = workspace.CurrentCamera
	if not camera then return end

	if touch and touch.Position and touch.Position.X > camera.ViewportSize.X / 2 then
		rightTouchReleased = true
		if isValidStopCondition() then
			startAimlock()
		end
	end
end)

-- ========= SKILL HOOK =========
if not getgenv().ZSkillHooked then
	getgenv().ZSkillHooked = true

	local oldNamecall
	oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
		local method = getnamecallmethod()
		local args = {...}

		if (method == "InvokeServer" or method == "FireServer") and args[1] then
			local a1 = args[1]
			if typeof(a1) == "string" and a1:upper() == "Z" then
				if currentTool and currentTool.Name == "Sanguine Art" then
					sanguineZActive = true
				elseif currentTool and currentTool.Name == "Godhuman" then
					godhumanZActive = true
				end
			end
		end

		return oldNamecall(self, ...)
	end)
end

-- =========================
-- Character Handling
-- =========================
local function onCharacterAdded(char)
	if char ~= player.Character then return end

	clearConnections()

	sanguineZActive, godhumanZActive = false, false
	rightTouchReleased = false

	for _, child in ipairs(char:GetChildren()) do
		if child:IsA("Tool") then
			hookTool(child)
		end
	end

	table.insert(characterConnections, char.ChildAdded:Connect(function(child)
		if child:IsA("Tool") then
			hookTool(child)
		end
	end))

	table.insert(characterConnections, char.ChildRemoved:Connect(function(child)
		if child == currentTool then
			currentTool = nil
			sanguineZActive, godhumanZActive = false, false
			rightTouchReleased = false
		end
	end))

	watchDamageCounter()
end

player.CharacterAdded:Connect(onCharacterAdded)
if player.Character then onCharacterAdded(player.Character) end

-- ========= PUBLIC TOGGLE FUNCTION =========
function ZSkillModule:SetZSkills(state)
	ZSkillsEnabled = state
	if not state then
		stopAimlock("ZSkills disabled")
		clearConnections()
	end
end

return ZSkillModule
