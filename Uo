-- ================= VSkillModule (updated for Godhuman Z aimlock) =================
local VSkillModule = {}

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")

local currentTool = nil
local lastTool = nil
local sharkZActive, vActive, cursedZActive, godhumanZActive = false, false, false, false
local dmgConn = nil
local characterConnections = {}
local rightTouchActive = false
local keyHoldingActive = false
local SilentAimModuleRef = nil

-- special flag: when true we enabled silent-aim specifically for Godhuman on release
local aimLockForGodhuman = false

local function clearConnections()
	for _, conn in ipairs(characterConnections) do
		pcall(function() conn:Disconnect() end)
	end
	characterConnections = {}
end

-- =========================
-- Silent Aimbot Control
-- =========================
local function DisableSilentAimbot()
    if SilentAimModuleRef then
        SilentAimModuleRef:Pause()
    end
end

local function EnableSilentAimbotPlayersAndNPC()
    if SilentAimModuleRef then
        -- explicitly enable both player & NPC silent aim so module will pick closest
        SilentAimModuleRef:SetPlayerSilentAim(true)
        SilentAimModuleRef:SetNPCSilentAim(true)
    end
end

local function RestoreSilentAimbot()
    if SilentAimModuleRef then
        SilentAimModuleRef:Restore()
    end
end

-- =========================
-- Tool Watcher
-- =========================
local function hookTool(tool)
    currentTool = tool
    lastTool = tool.Name
    table.insert(characterConnections, tool.AncestryChanged:Connect(function(_, parent)
        if not parent then
            currentTool = nil
            lastTool = nil
            sharkZActive, vActive, cursedZActive, godhumanZActive = false, false, false, false
            rightTouchActive = false
            aimLockForGodhuman = false
            RestoreSilentAimbot()
        end
    end))
end

local function isValidStopCondition()
    -- used in earlier logic to decide when Z/V are active
    return (currentTool and currentTool.Name == "Shark Anchor" and sharkZActive)
        or (lastTool == "Dough-Dough" and vActive)
        or (currentTool and currentTool.Name == "Cursed Dual Katana" and cursedZActive)
        or (currentTool and (currentTool.Name == "Godhuman" or currentTool.Name == "Godhuman Z") and godhumanZActive)
end

-- =========================
-- Touch Control (Mobile)
-- =========================
UserInputService.TouchStarted:Connect(function(touch)
    local camera = workspace.CurrentCamera
    if not camera then return end

    -- right half of screen
    if touch.Position.X > camera.ViewportSize.X / 2 then
        rightTouchActive = true
        -- if we are holding a skill that should disable aim while held, disable it
        if isValidStopCondition() then
            DisableSilentAimbot()
        end
    end
end)

UserInputService.TouchEnded:Connect(function(touch)
    local camera = workspace.CurrentCamera
    if not camera then return end

    if touch.Position.X > camera.ViewportSize.X / 2 then
        -- finger lifted from right side
        rightTouchActive = false

        -- If Godhuman Z was the skill being held, on release we enable aimlock (nearest target)
        if godhumanZActive then
            -- enable silent-aim and tell module to choose closest (SelectedPlayer nil -> it will pick closest)
            EnableSilentAimbotPlayersAndNPC()
            aimLockForGodhuman = true

            -- we keep godhumanZActive true until damage is detected (watchDamageCounter will clear)
            -- do NOT immediately clear godhumanZActive here; wait for damage to occur
        else
            -- for other skills, restore user's silent aim state
            RestoreSilentAimbot()
            sharkZActive, vActive, cursedZActive = false, false, false
        end
    end
end)

-- =========================
-- Keyboard Control (PC)
-- =========================
UserInputService.InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.UserInputType == Enum.UserInputType.Keyboard then
        if input.KeyCode == Enum.KeyCode.V then
            if lastTool == "Dough-Dough" then
                vActive = true
                keyHoldingActive = true
                DisableSilentAimbot()
            end
        elseif input.KeyCode == Enum.KeyCode.Z then
            if currentTool and currentTool.Name == "Shark Anchor" then
                sharkZActive = true
                keyHoldingActive = true
                DisableSilentAimbot()
            elseif currentTool and currentTool.Name == "Cursed Dual Katana" then
                cursedZActive = true
                keyHoldingActive = true
                DisableSilentAimbot()
            elseif currentTool and (currentTool.Name == "Godhuman" or currentTool.Name == "Godhuman Z") then
                -- start Godhuman Z hold
                godhumanZActive = true
                keyHoldingActive = true
                DisableSilentAimbot()
            end
        end
    end
end)

UserInputService.InputEnded:Connect(function(input, gp)
    if gp then return end
    if input.UserInputType == Enum.UserInputType.Keyboard then
        if input.KeyCode == Enum.KeyCode.V then
            if vActive then
                vActive = false
                keyHoldingActive = false
                RestoreSilentAimbot()
            end
        elseif input.KeyCode == Enum.KeyCode.Z then
            if sharkZActive then
                sharkZActive = false
                keyHoldingActive = false
                RestoreSilentAimbot()
            elseif cursedZActive then
                cursedZActive = false
                keyHoldingActive = false
                RestoreSilentAimbot()
            elseif godhumanZActive then
                -- on Z release (keyboard) for Godhuman behave same as right-screen release:
                godhumanZActive = false -- for keyboard flow we choose to treat it as "released -> enable aimlock"
                EnableSilentAimbotPlayersAndNPC()
                aimLockForGodhuman = true
                keyHoldingActive = false
            end
        end
    end
end)

-- =========================
-- Damage Counter Watch
-- =========================
local function watchDamageCounter()
    if dmgConn then
        pcall(function() dmgConn:Disconnect() end)
        dmgConn = nil
    end

    local gui = player:WaitForChild("PlayerGui"):WaitForChild("Main", 5)
    if not gui then return end

    local dmgCounter = gui:FindFirstChild("DmgCounter")
    if not dmgCounter then
        table.insert(characterConnections, gui.ChildAdded:Connect(function(child)
            if child.Name == "DmgCounter" then
                watchDamageCounter()
            end
        end))
        return
    end

    local dmgTextLabel = dmgCounter:FindFirstChild("Text")
    if not dmgTextLabel then
        table.insert(characterConnections, dmgCounter.ChildAdded:Connect(function(child)
            if child.Name == "Text" then
                watchDamageCounter()
            end
        end))
        return
    end

    dmgConn = dmgTextLabel:GetPropertyChangedSignal("Text"):Connect(function()
	    local dmgText = tonumber(dmgTextLabel.Text) or 0
	    -- if damage happened AND we had enabled aimlock specifically for Godhuman, disable it now
	    if dmgText > 0 and aimLockForGodhuman then
	        aimLockForGodhuman = false
	        godhumanZActive = false
	        -- stop the aimlock we enabled for the Godhuman release
	        DisableSilentAimbot()
	    elseif dmgText > 0 and isValidStopCondition() and (rightTouchActive or keyHoldingActive) then
            -- fallback for other skills: while still holding something that needs aim disabled, keep it disabled
	        DisableSilentAimbot()
	    elseif not rightTouchActive and not keyHoldingActive and not aimLockForGodhuman then
	        -- if nothing holding and no godhuman special aim active -> restore default user setting
	        RestoreSilentAimbot()
	    end
	end)

    table.insert(characterConnections, dmgConn)
end

-- =========================
-- Skill Detection (hook network calls)
-- =========================
if not getgenv().VSkillHooked then
    getgenv().VSkillHooked = true
    local old
	old = hookmetamethod(game, "__namecall", function(self, ...)
	    local method = getnamecallmethod()
	    local args = {...}
    
	    if (method == "InvokeServer" or method == "FireServer") then
	        local a1 = args[1]

	        if typeof(a1) == "string" and a1:upper() == "Z" then
	            if currentTool and currentTool.Name == "Shark Anchor" then
	                sharkZActive = true
					keyHoldingActive = true
					DisableSilentAimbot()
	            elseif currentTool and (currentTool.Name == "Cursed Dual Katana") then
	                cursedZActive = true
					keyHoldingActive = true
					DisableSilentAimbot()
	            elseif currentTool and (currentTool.Name == "Godhuman" or currentTool.Name == "Godhuman Z") then
	                godhumanZActive = true
	                keyHoldingActive = true
	                DisableSilentAimbot()
	            end
	        end
        
	        if typeof(a1) == "string" and a1:upper() == "V" then
	            if lastTool == "Dough-Dough" then
	                vActive = true
					keyHoldingActive = true
					DisableSilentAimbot()
	            end
	        end
	    end
	    return old(self, ...)
	end)
end

-- =========================
-- Character Handling
-- =========================
local function onCharacterAdded(char)
    clearConnections()
    
    sharkZActive, vActive, cursedZActive, godhumanZActive = false, false, false, false
    rightTouchActive = false
    keyHoldingActive = false
    aimLockForGodhuman = false
    RestoreSilentAimbot()

    table.insert(characterConnections, char.ChildAdded:Connect(function(child)
        if child:IsA("Tool") then hookTool(child) end
    end))

    table.insert(characterConnections, char.ChildRemoved:Connect(function(child)
        if child == currentTool and lastTool then
            currentTool = nil
            lastTool = nil
            sharkZActive, vActive, cursedZActive, godhumanZActive = false, false, false, false
            rightTouchActive = false
            keyHoldingActive = false
            aimLockForGodhuman = false
            RestoreSilentAimbot()
        end
    end))

    watchDamageCounter()
end

player.CharacterAdded:Connect(onCharacterAdded)
if player.Character then onCharacterAdded(player.Character) end

-- =========================
-- External Entry
-- =========================
function VSkillModule:CheckVSkillUsage(SilentAimModule)
    SilentAimModuleRef = SilentAimModule
    watchDamageCounter()
end

return VSkillModule
