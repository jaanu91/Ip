-- ================= VSkillModule =================
local VSkillModule = {}

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")

local currentTool = nil
local vActive, sharkZActive = false, false
local dmgConn = nil
local characterConnections = {}
local rightTouchActive = false
local SilentAimModuleRef = nil

local function clearConnections()
	for _, conn in ipairs(characterConnections) do
		pcall(function() conn:Disconnect() end)
	end
	characterConnections = {}
end

-- =========================
-- Silent Aimbot Control
-- =========================
local function DisableSilentAimbot()
    if SilentAimModuleRef then
        SilentAimModuleRef:Pause()
    end
end

local function EnableSilentAimbot()
    if SilentAimModuleRef then
        SilentAimModuleRef:Restore()
    end
end

-- =========================
-- Tool Watcher
-- =========================
local function hookTool(tool)
    currentTool = tool
    table.insert(characterConnections, tool.AncestryChanged:Connect(function(_, parent)
        if not parent then
            currentTool = nil
            vActive, sharkZActive = false, false
            rightTouchActive = false
            EnableSilentAimbot()
        end
    end))
end

local function isValidStopCondition()
    return (currentTool and currentTool.Name == "Dough-Dough" and vActive)
        or (currentTool and currentTool.Name == "Shark Anchor" and sharkZActive)
end

-- =========================
-- Touch Control
-- =========================
UserInputService.TouchStarted:Connect(function(touch)
    local camera = workspace.CurrentCamera
    if not camera then return end
    
    if touch.Position.X > camera.ViewportSize.X / 2 then
        rightTouchActive = true
        if isValidStopCondition() then
            DisableSilentAimbot()
        end
    end
end)

UserInputService.TouchEnded:Connect(function(touch)
    local camera = workspace.CurrentCamera
    if not camera then return end
    
    if touch.Position.X > camera.ViewportSize.X / 2 then
        rightTouchActive = false
        EnableSilentAimbot()
        vActive, sharkZActive = false, false
    end
end)

-- =========================
-- Damage Counter Watch
-- =========================
local function watchDamageCounter()
    if dmgConn then
        dmgConn:Disconnect()
        dmgConn = nil
    end

    local dmgTextLabel = player:WaitForChild("PlayerGui")
        :WaitForChild("Main", 2)
        :WaitForChild("DmgCounter", 2)
        :WaitForChild("Text", 2)

    dmgConn = dmgTextLabel:GetPropertyChangedSignal("Text"):Connect(function()
        local dmgText = tonumber(dmgTextLabel.Text) or 0
        if dmgText > 0 and isValidStopCondition() and rightTouchActive then
            DisableSilentAimbot()
        elseif not rightTouchActive then
            EnableSilentAimbot()
        end
    end)

    table.insert(characterConnections, dmgConn)
end

-- =========================
-- Skill Detection
-- =========================
local old
old = hookmetamethod(game, "__namecall", function(self, ...)
    local method = getnamecallmethod()
    local args = {...}
    
    if (method == "InvokeServer" or method == "FireServer") then
        local a1 = args[1]

        if typeof(a1) == "string" and a1:upper() == "V" then
            if currentTool and currentTool.Name == "Dough-Dough" then
                vActive = true
                task.delay(2, function()
	                vActive = false
				end)
            end
        end

        if typeof(a1) == "string" and a1:upper() == "Z" then
            if currentTool and currentTool.Name == "Shark Anchor" then
                sharkZActive = true
                task.delay(2, function()
                    sharkZActive = false
                end)
            end
        end
    end
    return old(self, ...)
end)

-- =========================
-- Character Handling
-- =========================
local function onCharacterAdded(char)
    clearConnections()
    
    local humanoid = char:WaitForChild("Humanoid")
    local hrp = char:WaitForChild("HumanoidRootPart")

    vActive, sharkZActive = false, false
    rightTouchActive = false
    EnableSilentAimbot()

    table.insert(characterConnections, char.ChildAdded:Connect(function(child)
        if child:IsA("Tool") then hookTool(child) end
    end))

    table.insert(characterConnections, char.ChildRemoved:Connect(function(child)
        if child == currentTool then
            currentTool = nil
            vActive, sharkZActive = false, false
            rightTouchActive = false
            EnableSilentAimbot()
        end
    end))

    watchDamageCounter()
end

player.CharacterAdded:Connect(onCharacterAdded)
if player.Character then onCharacterAdded(player.Character) end

-- =========================
-- External Entry
-- =========================
function VSkillModule:CheckVSkillUsage(SilentAimModule)
    SilentAimModuleRef = SilentAimModule
    watchDamageCounter()
end

return VSkillModule
