local HelperGodhumanZ = {}

local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local camera = workspace.CurrentCamera

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()

local currentTool = nil
local rightTouches = {}

-- Two separate toggles
local GodhumanZPlayersEnabled = false
local GodhumanZNPCsEnabled = false

local zActive = false
local maxRange = 1000

local function getHRP(model)
	return model and model:FindFirstChild("HumanoidRootPart")
end

local function getClosestPlayer(lpHRP)
	if not GodhumanZPlayersEnabled then return nil end -- respect toggle
	local closest, closestDist = nil, math.huge
	for _, pl in ipairs(Players:GetPlayers()) do
		if pl ~= player and pl.Character and pl.Character.Parent then
			local hum = pl.Character:FindFirstChildOfClass("Humanoid")
			local hrp = getHRP(pl.Character)
			if hum and hum.Health > 0 and hrp then
				local dist = (hrp.Position - lpHRP.Position).Magnitude
				if dist <= maxRange and dist < closestDist then
					closestDist, closest = dist, pl.Character
				end
			end
		end
	end
	return closest
end

local function getClosestNPC(lpHRP)
	if not GodhumanZNPCsEnabled then return nil end -- respect toggle
	local enemiesFolder = workspace:FindFirstChild("Enemies")
	if not enemiesFolder then return nil end

	local closest, closestDist = nil, math.huge
	for _, npc in ipairs(enemiesFolder:GetChildren()) do
		if npc:IsA("Model") and npc:FindFirstChild("Humanoid") then
			local hum = npc:FindFirstChild("Humanoid")
			local hrp = getHRP(npc)
			if hum and hum.Health > 0 and hrp then
				local dist = (hrp.Position - lpHRP.Position).Magnitude
				if dist <= maxRange and dist < closestDist then
					closestDist, closest = dist, npc
				end
			end
		end
	end
	return closest
end

local function hookTool(tool)
	currentTool = tool
	tool.AncestryChanged:Connect(function(_, parent)
		if not parent then
			currentTool = nil
			zActive = false
		end
	end)
end

char.ChildAdded:Connect(function(child)
	if child:IsA("Tool") then
		hookTool(child)
	end
end)

char.ChildRemoved:Connect(function(child)
	if child == currentTool then
		currentTool = nil
		zActive = false
	end
end)

local function activateAimlock()
	if not zActive then return end

	local hrp = char:FindFirstChild("HumanoidRootPart")
	if not hrp then return end

	-- Try players first if enabled, else NPCs
	local target = getClosestPlayer(hrp) or getClosestNPC(hrp)
	if not target then return end

	local targetHRP = target:FindFirstChild("HumanoidRootPart")
	if not targetHRP then return end

	local startTime = tick()
	local conn
	conn = RunService.RenderStepped:Connect(function()
		if tick() - startTime > 1 then
			conn:Disconnect()
			zActive = false
			return
		end
		camera.CFrame = CFrame.new(camera.CFrame.Position, targetHRP.Position)
	end)
end

do
	local old
	old = hookmetamethod(game, "__namecall", function(self, ...)
		local method = getnamecallmethod()
		local args = { ... }

		if (method == "InvokeServer" or method == "FireServer") then
			local a1 = args[1]
			if typeof(a1) == "string" and a1:upper() == "Z" then
				if currentTool and currentTool.Name == "Godhuman" then
					zActive = true
				end
			end
		end

		return old(self, ...)
	end)
end

UserInputService.TouchStarted:Connect(function(touch)
	if touch.Position.X > camera.ViewportSize.X / 2 then
		rightTouches[touch] = true
	end
end)

UserInputService.TouchEnded:Connect(function(touch)
	if rightTouches[touch] then
		rightTouches[touch] = nil
		if not next(rightTouches) then
			if zActive then
				activateAimlock()
			end
		end
	end
end)

-- Public API
function HelperGodhumanZ:SetPlayersState(state)
	GodhumanZPlayersEnabled = state and true or false
end

function HelperGodhumanZ:SetNPCsState(state)
	GodhumanZNPCsEnabled = state and true or false
end

function HelperGodhumanZ:IsPlayersEnabled()
	return GodhumanZPlayersEnabled
end

function HelperGodhumanZ:IsNPCsEnabled()
	return GodhumanZNPCsEnabled
end

return HelperGodhumanZ
